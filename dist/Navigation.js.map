{"version":3,"sources":["Navigation.js"],"names":["Navigation","_ref","arguments","length","undefined","_ref$menuId","menuId","_ref$fontFamily","fontFamily","_ref$chevronDown","chevronDown","_ref$chevronUp","chevronUp","_ref$click","_classCallCheck","this","menu","click","evt","submenuList","target","fontFamilies","parentElement","nextSibling","localName","getElementsByTagName","document","hasNestedSubmenu","classList","toggle","contains","setAttribute","getElementsByClassName","previousSibling","expandedElementCollection","querySelectorAll","openElementCollection","remove","parentNode","id","offsetParent","keyCode","openSubmenu","type","getAttribute","clickHandler","keyDownHandler","_this","Array","prototype","slice","call","forEach","element","listeners","push","focusInHandler","add","hoverHandler","i","addEventListener","eventDispatcher","_this2","listElements","icons","subMenuList","style","createElement","styleSheet","cssText","hoverCss","appendChild","createTextNode","icon","getElementById","setEventListeners","setSubmenuIcon"],"mappings":"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","file":"Navigation.js","sourcesContent":["class Navigation {\n    constructor({\n        menuId = 'main-menu',\n        fontFamily = 'Font Awesome 5 Free',\n        chevronDown = '\\\\f078',\n        chevronUp = '\\\\f077',\n        click = false\n    } = {}) {\n        this.chevronDown = chevronDown;\n        this.chevronUp = chevronUp;\n        this.fontFamilies = ['FontAwesome', 'Font Awesome 5 Free', 'Glyphicons Halflings'];\n        this.fontFamily = fontFamily;\n        this.hasNestedSubmenu = false;\n        this.menu = null;\n        this.menuId = menuId;\n        this.click = click;\n    }\n    clickHandler(evt) {\n        let { target } = evt;\n        let submenuList = null;\n\n        // people might click on the icon instead of the button.\n        // if so, set the target to the parent (button)\n        if (target.localName === 'span') {\n            target = target.parentElement;\n        }\n\n        // let's open and close the menu\n\n        // if we're not clicking 'near' a submenu close any open submenus\n        if (target.nextSibling === null || target.nextSibling.localName !== 'ul') {\n\n            // if the submenu is open and we click on something else like the body\n            // close it and set aria-expanded to false\n            if (document.getElementsByClassName('submenu-list-open').length > 0) {\n\n                // there's an open submenu somewhere... we need to close it\n\n                // the submenu <ul>\n                submenuList = document.getElementsByClassName('submenu-list-open')[0];\n\n                // remove the class that displays the submenu\n                submenuList.classList.remove('submenu-list-open');\n\n                // set aria-expanded to false to switch the icon\n                submenuList.previousSibling.setAttribute('aria-expanded', 'false')\n            } else {\n                return;\n            }\n\n        } else {\n\n            // we're near a submenu by clicking on a button\n            submenuList = target.nextSibling;\n\n            // check if there's a nested submenu\n            submenuList.getElementsByTagName('ul').length \n                ? this.hasNestedSubmenu = true \n                : this.hasNestedSubmenu = false;\n\n            // toggle the submenu display class\n            submenuList.classList.toggle('submenu-list-open');\n\n            // toggle the aria-expanded attribute\n            submenuList.classList.contains('submenu-list-open') \n                ? target.setAttribute('aria-expanded', 'true') \n                : target.setAttribute('aria-expanded', 'false');\n\n            return;\n        }\n    }\n    focusInHandler(evt) {\n        const { target } = evt;\n        const { offsetParent: { parentNode } } = target;\n\n        let expandedElementCollection = this.menu.querySelectorAll('[aria-expanded=\"true\"]');\n        let openElementCollection = this.menu.getElementsByClassName('submenu-list-open')\n\n        if (!this.menu.contains(target) && expandedElementCollection.length) {\n            // if the menu doesn't contain the target, close all the submenus.\n            expandedElementCollection[0].setAttribute('aria-expanded', 'false');\n            openElementCollection[0].classList.remove('submenu-list-open')\n        } else {\n            // close the submenu when you leave by checking if focus has returned to the parentNode\n            expandedElementCollection = parentNode.querySelectorAll('[aria-expanded=\"true\"]');\n            openElementCollection = parentNode.getElementsByClassName('submenu-list-open');\n\n            if ((parentNode.id === this.menuId) && expandedElementCollection.length) {\n                expandedElementCollection[0].setAttribute('aria-expanded', 'false');\n                openElementCollection[0].classList.remove('submenu-list-open');\n            }\n        }\n        return;\n    }\n    keyDownHandler(evt) {\n        const { keyCode } = evt;\n\n        const expandedElementCollection = document.querySelectorAll('[aria-expanded=\"true\"]')[0];\n        const openSubmenu = document.getElementsByClassName('submenu-list-open')[0];\n\n        if (keyCode === 27 && openSubmenu) {\n            expandedElementCollection.setAttribute('aria-expanded', 'false');\n            openSubmenu.classList.remove('submenu-list-open');\n        }\n\n    }\n    hoverHandler(evt) {\n        const { type, target } = evt;\n        if (type === 'mouseout' && target.getAttribute('aria-haspopup') === \"true\") {\n            target.setAttribute('aria-expanded', 'false');\n        } else if (type === 'mouseover' && target.getAttribute('aria-haspopup') === \"false\") {\n            target.setAttribute('aria-expanded', 'true');\n        }\n    }\n    eventDispatcher(evt) {\n        // dispatch event listeners to the correct functions.\n        switch (evt.type) {\n            case 'click':\n                this.clickHandler(evt);\n                break;\n            case 'focusin':\n                this.focusInHandler(evt);\n                break;\n            case 'keydown':\n                this.keyDownHandler(evt);\n                break;\n            case 'mouseover':\n            case 'mouseout':\n                this.hoverHandler(evt);\n                break;\n            default:\n                return;\n                break;\n        }\n    }\n    setEventListeners() {\n        // if this script is running, remove the 'no-js' class from the elements.\n        const listElements = Array.prototype.slice.call(this.menu.getElementsByClassName('no-js'));\n        listElements.forEach(element => {\n            element.classList.remove('no-js');\n        });\n        // define a list of possible event listeners\n        let listeners = ['focusin', 'keydown', 'mouseover'];\n\n        if (this.click) {\n            listeners.push('click');\n            \n            const subMenuList = this.menu.querySelectorAll('.submenu-list');\n            \n            subMenuList.forEach(menu => menu.classList.add('click-menu'));\n\n        } else {\n            listeners.push('mouseout');\n        }\n        // attach them to the document.\n        for (let i = 0; i < listeners.length; i++) {\n            document.addEventListener(listeners[i], (evt) => {\n                // dispatch the events to the class methods.\n                this.eventDispatcher(evt);\n            });\n        }\n    }\n    setSubmenuIcon() {\n        // possible font-family for the icons\n        let fontFamily = this.fontFamily;\n\n        if (!this.fontFamilies.includes(fontFamily)) {\n            fontFamily = '';\n        }\n\n        // the list of all the submenu icons\n        const icons = this.menu.querySelectorAll('.submenu-icon');\n        // the css to inject into the page\n        const hoverCss = `\n      nav ul li span::before {\n        content: '${this.chevronDown}';\n        font-family: '${fontFamily}';\n        font-weight: bold;\n      }\n      nav ul.click-menu li > button[aria-expanded=\"true\"] span::before,\n      nav ul:not(.click-menu) li:hover > button span::before,\n      nav ul li:focus > button span::before { \n        content: '${this.chevronUp}';\n        font-family: '${fontFamily}'; \n        font-weight: bold;\n      }`;\n\n        // create a style tag\n        const style = document.createElement('style');\n        // add the styles to the tag (or a stylesheet if it exists)\n        if (style.styleSheet) {\n            style.styleSheet.cssText = hoverCss;\n        } else {\n            style.appendChild(document.createTextNode(hoverCss));\n        }\n        // add the tag to the <head>\n        document.getElementsByTagName('head')[0].appendChild(style);\n        // set the data-before attribute to the values passed in the constructor.\n        icons.forEach((icon) => {\n            icon.setAttribute('data-before', this.chevronDown);\n        })\n    }\n    init() {\n        this.menu = document.getElementById(this.menuId);\n        this.setEventListeners();\n        this.setSubmenuIcon();\n    }\n}\n\n"]}