{"version":3,"sources":["Navigation.js"],"names":["Navigation","_ref","arguments","length","undefined","_ref$menuId","menuId","_ref$fontFamily","fontFamily","_ref$chevronDown","chevronDown","_ref$chevronUp","chevronUp","_ref$click","_classCallCheck","this","menu","click","evt","submenuList","activeElement","target","fontFamilies","parentElement","document","hasFocus","console","log","nextSibling","localName","getElementsByTagName","hasNestedSubmenu","classList","toggle","contains","setAttribute","getElementsByClassName","remove","previousSibling","expandedElementCollection","querySelectorAll","openElementCollection","parentNode","offsetParent","keyCode","openSubmenu","type","getAttribute","clickHandler","focusInHandler","hoverHandler","_this","Array","prototype","slice","call","forEach","element","listeners","push","add","i","addEventListener","eventDispatcher","listElements","includes","icons","subMenuList","style","createElement","styleSheet","cssText","hoverCss","appendChild","createTextNode","icon","_this2","getElementById","setEventListeners","setSubmenuIcon"],"mappings":"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","file":"Navigation.js","sourcesContent":["class Navigation {\n    constructor({\n        menuId = 'main-menu',\n        fontFamily = 'Font Awesome 5 Free',\n        chevronDown = '\\\\f078',\n        chevronUp = '\\\\f077',\n        click = false\n    } = {}) {\n        this.chevronDown = chevronDown;\n        this.chevronUp = chevronUp;\n        this.fontFamilies = ['FontAwesome', 'Font Awesome 5 Free', 'Glyphicons Halflings'];\n        this.fontFamily = fontFamily;\n        this.hasNestedSubmenu = false;\n        this.menu = null;\n        this.menuId = menuId;\n        this.click = click;\n    }\n    clickHandler(evt) {\n        let { target } = evt;\n        let submenuList = null;\n        let activeElement = null;\n        // people might click on the icon instead of the button.\n        // if so, set the target to the parent (button)\n        if (target.localName === 'span') {\n            target = target.parentElement;\n        }\n\n        if (document.hasFocus()) {\n            activeElement = document.activeElement;\n        }\n\n        if (target = activeElement) {\n            console.log('yes?')\n        }\n        console.log(document.activeElement, 'focus?')\n\n        // let's open and close the menu\n\n        // if we're not clicking 'near' a submenu close any open submenus\n        if (target.nextSibling === null || target.nextSibling.localName !== 'ul') {\n\n            // if the submenu is open and we click on something else like the body\n            // close it and set aria-expanded to false\n            if (document.getElementsByClassName('submenu-list-open').length > 0) {\n\n                // there's an open submenu somewhere... we need to close it\n\n                // the submenu <ul>\n                submenuList = document.getElementsByClassName('submenu-list-open')[0];\n\n                // remove the class that displays the submenu\n                submenuList.classList.remove('submenu-list-open');\n\n                // set aria-expanded to false to switch the icon\n                submenuList.previousSibling.setAttribute('aria-expanded', 'false')\n            } else {\n                return;\n            }\n\n        } else {\n\n            // we're near a submenu by clicking on a button\n            submenuList = target.nextSibling;\n\n            // check if there's a nested submenu\n            submenuList.getElementsByTagName('ul').length \n                ? this.hasNestedSubmenu = true \n                : this.hasNestedSubmenu = false;\n\n            // toggle the submenu display class\n            submenuList.classList.toggle('submenu-list-open');\n\n            // toggle the aria-expanded attribute\n            submenuList.classList.contains('submenu-list-open') \n                ? target.setAttribute('aria-expanded', 'true') \n                : target.setAttribute('aria-expanded', 'false');\n\n            return;\n        }\n    }\n    focusInHandler(evt) {\n        const { target } = evt;\n        const { offsetParent: { parentNode } } = target;\n\n        let expandedElementCollection = this.menu.querySelectorAll('[aria-expanded=\"true\"]');\n        let openElementCollection = this.menu.getElementsByClassName('submenu-list-open')\n\n\n        if (!this.menu.contains(target) && expandedElementCollection.length) {\n            // if the menu doesn't contain the target, close all the submenus.\n            // this is only needed for tabbing out of open submenus into something out of the nav.\n            expandedElementCollection[0].setAttribute('aria-expanded', 'false');\n            openElementCollection[0].classList.remove('submenu-list-open')\n\n        } else {\n            // close the submenu when you leave by checking if focus has returned to the parentNode\n            expandedElementCollection = parentNode.querySelectorAll('[aria-expanded=\"true\"]');\n            openElementCollection = parentNode.getElementsByClassName('submenu-list-open');\n\n            if (\n                (parentNode.id === this.menuId || parentNode.localName === 'ul') \n                && expandedElementCollection.length) {\n                expandedElementCollection[0].setAttribute('aria-expanded', 'false');\n                openElementCollection[0].classList.remove('submenu-list-open');\n            }\n        }\n        return;\n    }\n    keyDownHandler(evt) {\n        const { keyCode } = evt;\n\n        const expandedElementCollection = document.querySelectorAll('[aria-expanded=\"true\"]')[0];\n        const openSubmenu = document.getElementsByClassName('submenu-list-open')[0];\n\n        if (keyCode === 27 && openSubmenu) {\n            expandedElementCollection.setAttribute('aria-expanded', 'false');\n            openSubmenu.classList.remove('submenu-list-open');\n        }\n\n    }\n    hoverHandler(evt) {\n        const { type, target } = evt;\n        if (type === 'mouseout' && target.getAttribute('aria-haspopup') === \"true\") {\n            target.setAttribute('aria-expanded', 'false');\n        } else if (type === 'mouseover' && target.getAttribute('aria-haspopup') === \"false\") {\n            target.setAttribute('aria-expanded', 'true');\n        }\n    }\n    eventDispatcher(evt) {\n        // dispatch event listeners to the correct functions.\n        switch (evt.type) {\n            case 'click':\n                this.clickHandler(evt);\n                break;\n            case 'focusin':\n                this.focusInHandler(evt);\n                break;\n            case 'keydown':\n                this.keyDownHandler(evt);\n                break;\n            case 'mouseover':\n            case 'mouseout':\n                this.hoverHandler(evt);\n                break;\n            default:\n                return;\n                break;\n        }\n    }\n    setEventListeners() {\n        // if this script is running, remove the 'no-js' class from the elements.\n        const listElements = Array.prototype.slice.call(this.menu.getElementsByClassName('no-js'));\n        listElements.forEach(element => {\n            element.classList.remove('no-js');\n        });\n        // define a list of possible event listeners\n        let listeners = ['focusin', 'keydown', 'mouseover'];\n\n        if (this.click) {\n            listeners.push('click');\n            \n            const subMenuList = this.menu.querySelectorAll('.submenu-list');\n            \n            subMenuList.forEach(menu => menu.classList.add('click-menu'));\n\n        } else {\n            listeners.push('mouseout');\n        }\n        // attach them to the document.\n        for (let i = 0; i < listeners.length; i++) {\n            document.addEventListener(listeners[i], (evt) => {\n                // dispatch the events to the class methods.\n                this.eventDispatcher(evt);\n            });\n        }\n    }\n    setSubmenuIcon() {\n        // possible font-family for the icons\n        let fontFamily = this.fontFamily;\n\n        if (!this.fontFamilies.includes(fontFamily)) {\n            fontFamily = '';\n        }\n\n        // the list of all the submenu icons\n        const icons = this.menu.querySelectorAll('.submenu-icon');\n        // the css to inject into the page\n        const hoverCss = `\n            nav ul li span::before {\n                content: '${this.chevronDown}';\n                font-family: '${fontFamily}';\n                font-weight: bold;\n            }\n            nav ul.click-menu li > button[aria-expanded=\"true\"] span::before,\n            nav ul:not(.click-menu) li:hover > button span::before,\n            nav ul li:focus > button span::before { \n                content: '${this.chevronUp}';\n                font-family: '${fontFamily}'; \n                font-weight: bold;\n            }`;\n\n        // create a style tag\n        const style = document.createElement('style');\n\n        // add the styles to the tag (or a stylesheet if it exists)\n        if (style.styleSheet) {\n            style.styleSheet.cssText = hoverCss;\n        } else {\n            style.appendChild(document.createTextNode(hoverCss));\n        }\n\n        // add the tag to the <head>\n        document.getElementsByTagName('head')[0].appendChild(style);\n\n        // set the data-before attribute to the values passed in the constructor.\n        icons.forEach((icon) => icon.setAttribute('data-before', this.chevronDown));\n\n        return;\n    }\n    init() {\n        this.menu = document.getElementById(this.menuId);\n        this.setEventListeners();\n        this.setSubmenuIcon();\n    }\n}\n\n"]}