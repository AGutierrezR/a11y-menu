{"version":3,"sources":["Navigation.js"],"names":["Navigation","a","b","arguments","length","c","menuId","e","fontFamily","g","chevronDown","i","chevronUp","k","click","_classCallCheck","this","fontFamilies","hasNestedSubmenu","menu","evt","target","localName","parentElement","submenuList","nextSibling","getElementsByTagName","getAttribute","classList","contains","preventDefault","toggle","setAttribute","parentNode","offsetParent","expandedElementCollection","querySelectorAll","getElementsByClassName","keyCode","openSubmenu","remove","type","clickHandler","focusInHandler","keyDownHandler","hoverHandler","Array","prototype","slice","call","forEach","element","listeners","console","log","push","addEventListener","eventDispatcher","includes","icons","hoverCss","style","document","createElement","styleSheet","cssText","appendChild","createTextNode","icon","getElementById","setEventListeners","setSubmenuIcon"],"mappings":"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","file":"Navigation.js","sourcesContent":["class Navigation {\n    constructor({\n        menuId = 'main-menu',\n        fontFamily = 'Font Awesome 5 Free',\n        chevronDown = '\\\\f078',\n        chevronUp = '\\\\f077',\n        click = false\n    } = {}) {\n        this.chevronDown = chevronDown;\n        this.chevronUp = chevronUp;\n        this.fontFamilies = ['FontAwesome', 'Font Awesome 5 Free', 'Glyphicons Halflings'];\n        this.fontFamily = fontFamily;\n        this.hasNestedSubmenu = false;\n        this.menu = null;\n        this.menuId = menuId;\n        this.click = click;\n    }\n    clickHandler(evt) {\n        let target = evt.target;\n        if (target.localName == \"span\") {\n            target = target.parentElement;\n        }\n        const submenuList = target.nextSibling;\n        // find out if there is a nested submenu inside a top level item\n        submenuList.getElementsByTagName('ul').length ? this.hasNestedSubmenu = true : this.hasNestedSubmenu = false;\n        // if something weird happens, don't allow any further event handling.\n        if (!target.getAttribute('aria-haspopup')) return;\n\n        // if we're on a list item that is really just a toggle, \n        // that is it doesn't have a page that it goes to, prevent the page from reloading.\n        target.classList.contains('submenu-toggle') ? evt.preventDefault() : null;\n\n        submenuList.classList.toggle('submenu-list-open');\n        target.setAttribute('aria-expanded', 'true');\n\n        submenuList.classList.contains('submenu-list-open') ? null : target.setAttribute('aria-expanded', 'false');\n    }\n    focusInHandler(evt) {\n        const { target } = evt;\n        const { offsetParent: { parentNode } } = target;\n\n        // if the parentUL isn't the menu and it contains the target return\n        if (parentNode !== this.menu && parentNode.contains(target)) {\n            return\n        } else {\n            // close the submenu when you leave\n            const expandedElementCollection = parentNode.querySelectorAll('[aria-expanded=\"true\"]');\n            const openElementCollection = parentNode.getElementsByClassName('submenu-list-open');\n\n            if (expandedElementCollection.length) {\n                // expandedElementCollection[0].setAttribute('aria-expanded', 'false');\n                // openElementCollection[0].classList.remove('submenu-list-open');\n            }\n        }\n    }\n    keyDownHandler(evt) {\n        const { keyCode, target } = evt;\n        const { offsetParent: { parentNode } } = target;\n        const expandedElementCollection = parentNode.querySelectorAll('[aria-expanded=\"true\"]')[0];\n        const openSubmenu = parentNode.getElementsByClassName('submenu-list-open')[0];\n\n        if (keyCode === 27 && openSubmenu) {\n            expandedElementCollection.setAttribute('aria-expanded', 'false');\n            openSubmenu.classList.remove('submenu-list-open');\n        }\n\n    }\n    hoverHandler(evt) {\n        const { type, target } = evt;\n        if (type === 'mouseout' && target.getAttribute('aria-haspopup') === \"true\") {\n            target.setAttribute('aria-expanded', 'false');\n        } else if (type === 'mouseover' && target.getAttribute('aria-haspopup') === \"false\") {\n            target.setAttribute('aria-expanded', 'true');\n        }\n    }\n    eventDispatcher(evt) {\n        // dispatch event listeners to the correct functions.\n        switch (evt.type) {\n            case 'click':\n                this.clickHandler(evt);\n                break;\n            case 'focusin':\n                this.focusInHandler(evt);\n                break;\n            case 'keydown':\n                this.keyDownHandler(evt);\n                break;\n            case 'mouseover':\n            case 'mouseout':\n                this.hoverHandler(evt);\n                break;\n            default:\n                return;\n                break;\n        }\n    }\n    setEventListeners() {\n        // if this script is running, remove the 'no-js' class from the elements.\n        const listElements = Array.prototype.slice.call(this.menu.getElementsByClassName('no-js'));\n        listElements.forEach(element => {\n            element.classList.remove('no-js');\n        });\n        // define a list of possible event listeners\n        let listeners = ['focusin', 'keydown', 'mouseover'];\n        console.log(this.click);\n        if (this.click) {\n            listeners.push('click');\n        } else {\n            listeners.push('mouseout');\n        }\n        // attach them to the menu.\n        for (let i = 0; i < listeners.length; i++) {\n            this.menu.addEventListener(listeners[i], (evt) => {\n                // dispatch the events to the class methods.\n                this.eventDispatcher(evt);\n            });\n        }\n    }\n    setSubmenuIcon() {\n        // possible font-family for the icons\n        let fontFamily = this.fontFamily;\n\n        if (!this.fontFamilies.includes(fontFamily)) {\n            fontFamily = '';\n        }\n\n        // the list of all the submenu icons\n        const icons = this.menu.querySelectorAll('.submenu-icon');\n        // the css to inject into the page\n        const hoverCss = `\n      nav ul li span::before {\n        content: '${this.chevronDown}';\n        font-family: '${fontFamily}';\n        font-weight: bold;\n      }\n      nav ul.click-menu li > button[aria-expanded=\"true\"] span::before,\n      nav ul:not(.click-menu) li:hover > button span::before,\n      nav ul li:focus > button span::before { \n        content: '${this.chevronUp}';\n        font-family: '${fontFamily}'; \n        font-weight: bold;\n      }`;\n\n        // create a style tag\n        const style = document.createElement('style');\n        // add the styles to the tag (or a stylesheet if it exists)\n        if (style.styleSheet) {\n            style.styleSheet.cssText = hoverCss;\n        } else {\n            style.appendChild(document.createTextNode(hoverCss));\n        }\n        // add the tag to the <head>\n        document.getElementsByTagName('head')[0].appendChild(style);\n        // set the data-before attribute to the values passed in the constructor.\n        icons.forEach((icon) => {\n            icon.setAttribute('data-before', this.chevronDown);\n        })\n    }\n    init() {\n        this.menu = document.getElementById(this.menuId);\n        this.setEventListeners();\n        this.setSubmenuIcon();\n    }\n}"]}