{"version":3,"sources":["Navigation.js"],"names":["Navigation","a","b","arguments","length","c","menuId","e","fontFamily","g","chevronDown","i","chevronUp","_classCallCheck","this","fontFamilies","hasNestedSubmenu","menu","element","localName","icon","children","getAttribute","setAttribute","evt","target","parentElement","submenuList","nextSibling","getElementsByTagName","classList","contains","preventDefault","toggle","parentNode","offsetParent","expandedElementCollection","querySelectorAll","openElementCollection","getElementsByClassName","remove","chevronSwitcher","keyCode","openSubmenu","type","clickHandler","focusInHandler","keyDownHandler","hoverHandler","Array","prototype","slice","call","forEach","listeners","addEventListener","eventDispatcher","includes","icons","hoverCss","style","document","createElement","styleSheet","cssText","appendChild","createTextNode","getElementById","setEventListeners","setSubmenuIcon"],"mappings":"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","file":"Navigation.js","sourcesContent":["class Navigation {\n    constructor({\n        menuId = 'main-menu',\n        fontFamily = 'Font Awesome 5 Free',\n        chevronDown = '\\\\f078',\n        chevronUp = '\\\\f077'\n    } = {}) {\n        this.chevronDown = chevronDown;\n        this.chevronUp = chevronUp;\n        this.fontFamilies = ['FontAwesome', 'Font Awesome 5 Free', 'Glyphicons Halflings'];\n        this.fontFamily = fontFamily;\n        this.hasNestedSubmenu = false;\n        this.menu = null;\n        this.menuId = menuId;\n    }\n    chevronSwitcher(element) {\n        if (element.localName !== \"button\") return;\n        const icon = element.children[0];\n\n        if (element.getAttribute('aria-expanded') == 'true') {\n            icon.setAttribute('data-before', this.chevronDown);\n            element.setAttribute('aria-expanded', 'false');\n        } else {\n            icon.setAttribute('data-before', this.chevronUp);\n            element.setAttribute('aria-expanded', 'true');\n        }\n    }\n    clickHandler(evt) {\n        let target = evt.target;\n        if (target.localName == \"span\") {\n            target = target.parentElement;\n        }\n        const submenuList = target.nextSibling;\n        // find out if there is a nested submenu inside a top level item\n        submenuList.getElementsByTagName('ul').length ? this.hasNestedSubmenu = true : this.hasNestedSubmenu = false;\n        // if something weird happens, don't allow any further event handling.\n        if (!target.getAttribute('aria-haspopup')) return;\n\n        // if we're on a list item that is really just a toggle, \n        // that is it doesn't have a page that it goes to, prevent the page from reloading.\n        target.classList.contains('submenu-toggle') ? evt.preventDefault() : null;\n\n        submenuList.classList.toggle('submenu-list-open');\n        target.setAttribute('aria-expanded', 'true');\n\n        submenuList.classList.contains('submenu-list-open') ? null : target.setAttribute('aria-expanded', 'false');\n    }\n    focusInHandler(evt) {\n        const { target } = evt;\n        const { offsetParent: { parentNode } } = target;\n\n        // if the parentUL isn't the menu and it contains the target return\n        if (parentNode !== this.menu && parentNode.contains(target)) {\n            return\n        } else {\n            // close the submenu when you leave\n            const expandedElementCollection = parentNode.querySelectorAll('[aria-expanded=\"true\"]');\n            const openElementCollection = parentNode.getElementsByClassName('submenu-list-open');\n\n            if (expandedElementCollection.length) {\n                // expandedElementCollection[0].setAttribute('aria-expanded', 'false');\n                openElementCollection[0].classList.remove('submenu-list-open');\n                this.chevronSwitcher(expandedElementCollection[0]);\n            }\n        }\n    }\n    keyDownHandler(evt) {\n        const { keyCode, target } = evt;\n        const { offsetParent: { parentNode } } = target;\n        const expandedElementCollection = parentNode.querySelectorAll('[aria-expanded=\"true\"]')[0];\n        const openSubmenu = parentNode.getElementsByClassName('submenu-list-open')[0];\n\n        if (keyCode === 27 && openSubmenu) {\n            this.chevronSwitcher(expandedElementCollection);\n            openSubmenu.classList.remove('submenu-list-open');\n        }\n\n    }\n    hoverHandler(evt) {\n        const { type, target } = evt;\n        if (type === 'mouseout' && target.getAttribute('aria-haspopup') === \"true\") {\n            target.setAttribute('aria-expanded', 'false');\n        } else if (type === 'mouseover' && target.getAttribute('aria-haspopup') === \"false\") {\n            target.setAttribute('aria-expanded', 'true');\n        }\n    }\n    eventDispatcher(evt) {\n        // dispatch event listeners to the correct functions.\n        switch (evt.type) {\n            case 'click':\n                this.clickHandler(evt);\n                break;\n            case 'focusin':\n                this.focusInHandler(evt);\n                break;\n            case 'keydown':\n                this.keyDownHandler(evt);\n                break;\n            case 'mouseover':\n            case 'mouseout':\n                this.hoverHandler(evt);\n                break;\n            default:\n                return;\n                break;\n        }\n    }\n    setEventListeners() {\n        // if this script is running, remove the 'no-js' class from the elements.\n        const listElements = Array.prototype.slice.call(this.menu.getElementsByClassName('no-js'));\n        listElements.forEach(element => {\n            element.classList.remove('no-js');\n        });\n        // define a list of possible event listeners\n        const listeners = ['click', 'focusin', 'keydown', 'mouseout', 'mouseover'];\n        // attach them to the menu.\n        for (let i = 0; i < listeners.length; i++) {\n            this.menu.addEventListener(listeners[i], (evt) => {\n                // dispatch the events to the class methods.\n                this.eventDispatcher(evt);\n            });\n        }\n    }\n    setSubmenuIcon() {\n        // possible font-family for the icons\n        let fontFamily = this.fontFamily;\n\n        if (!this.fontFamilies.includes(fontFamily)) {\n            fontFamily = '';\n        }\n\n        // the list of all the submenu icons\n        const icons = this.menu.querySelectorAll('.submenu-icon');\n        // the css to inject into the page\n        const hoverCss = `\n      nav ul li span::before {\n        content: '${this.chevronDown}';\n        font-family: '${fontFamily}';\n        font-weight: bold;\n      }\n      nav ul.click-menu li > button[aria-expanded=\"true\"] span::before,\n      nav ul.hover-menu li:hover > button span::before,\n      nav ul li:focus > button span::before { \n        content: '${this.chevronUp}';\n        font-family: '${fontFamily}'; \n        font-weight: bold;\n      }`;\n\n        // create a style tag\n        const style = document.createElement('style');\n        // add the styles to the tag (or a stylesheet if it exists)\n        if (style.styleSheet) {\n            style.styleSheet.cssText = hoverCss;\n        } else {\n            style.appendChild(document.createTextNode(hoverCss));\n        }\n        // add the tag to the <head>\n        document.getElementsByTagName('head')[0].appendChild(style);\n        // set the data-before attribute to the values passed in the constructor.\n        icons.forEach((icon) => {\n            icon.setAttribute('data-before', this.chevronDown);\n        })\n    }\n    init() {\n        this.menu = document.getElementById(this.menuId);\n        this.setEventListeners();\n        this.setSubmenuIcon();\n    }\n}"]}