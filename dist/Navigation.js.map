{"version":3,"sources":["Navigation.js"],"names":["Navigation","_ref","arguments","length","undefined","_ref$menuId","menuId","_ref$fontFamily","fontFamily","_ref$chevronDown","chevronDown","_ref$chevronUp","chevronUp","_ref$click","_classCallCheck","this","menu","click","evt","console","log","target","localName","submenuList","parentElement","nextSibling","document","getElementsByClassName","hasNestedSubmenu","getAttribute","classList","contains","preventDefault","toggle","setAttribute","parentNode","offsetParent","getElementsByTagName","querySelectorAll","openElementCollection","expandedElementCollection","remove","id","openSubmenu","type","keyCode","clickHandler","hoverHandler","prototype","slice","call","forEach","element","listeners","push","i","addEventListener","_this","eventDispatcher","_this2","fontFamilies","includes","icons","hoverCss","listElements","style","styleSheet","cssText","appendChild","createTextNode","icon","getElementById","setEventListeners","setSubmenuIcon"],"mappings":"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","file":"Navigation.js","sourcesContent":["class Navigation {\n    constructor({\n        menuId = 'main-menu',\n        fontFamily = 'Font Awesome 5 Free',\n        chevronDown = '\\\\f078',\n        chevronUp = '\\\\f077',\n        click = false\n    } = {}) {\n        this.chevronDown = chevronDown;\n        this.chevronUp = chevronUp;\n        this.fontFamilies = ['FontAwesome', 'Font Awesome 5 Free', 'Glyphicons Halflings'];\n        this.fontFamily = fontFamily;\n        this.hasNestedSubmenu = false;\n        this.menu = null;\n        this.menuId = menuId;\n        this.click = click;\n    }\n    clickHandler(evt) {\n        let { target } = evt;\n        console.log(target.localName)\n\n        if (target.localName === 'span') {\n            target = target.parentElement;\n        }\n\n        console.log(document.getElementsByClassName('submenu-list-open'))\n\n\n\n    }\n    clickHandlerOld(evt) {\n        let { target } = evt;\n        console.log(target, 'click target')\n        let submenuList = null;\n        if (target.localName == \"span\") {\n            target = target.parentElement;\n        }\n        \n        // if (submenuList !== null || submenuList.getElementsByTagName === 'function') {\n        //     console.log('function')\n        // } else {\n        //     console.log('not a function');\n        // }\n\n\n        if (target.nextSibling === null || target.nextSibling.localName !== 'ul') {\n            submenuList = document.getElementsByClassName('submenu-list-open')\n        } else {\n            submenuList = target.nextSibling;\n        }\n\n\n        // find out if there is a nested submenu inside a top level item\n        submenuList.getElementsByTagName('ul').length > 0 ? this.hasNestedSubmenu = true : this.hasNestedSubmenu = false;\n        // if something weird happens, don't allow any further event handling.\n        if (!target.getAttribute('aria-haspopup')) return;\n\n        // if we're on a list item that is really just a toggle, \n        // that is it doesn't have a page that it goes to, prevent the page from reloading.\n        target.classList.contains('submenu-toggle') ? evt.preventDefault() : null;\n\n        submenuList.classList.toggle('submenu-list-open');\n        target.setAttribute('aria-expanded', 'true');\n\n        submenuList.classList.contains('submenu-list-open') ? null : target.setAttribute('aria-expanded', 'false');\n    }\n    focusInHandler(evt) {\n        const { target } = evt;\n        const { offsetParent: { parentNode } } = target;\n\n        let expandedElementCollection = this.menu.querySelectorAll('[aria-expanded=\"true\"]');\n        let openElementCollection = this.menu.getElementsByClassName('submenu-list-open')\n\n        if (!this.menu.contains(target) && expandedElementCollection.length) {\n            // if the menu doesn't contain the target, close all the submenus.\n            expandedElementCollection[0].setAttribute('aria-expanded', 'false');\n            openElementCollection[0].classList.remove('submenu-list-open')\n        } else {\n            // close the submenu when you leave by checking if focus has returned to the parentNode\n            expandedElementCollection = parentNode.querySelectorAll('[aria-expanded=\"true\"]');\n            openElementCollection = parentNode.getElementsByClassName('submenu-list-open');\n\n            if ((parentNode.id === this.menuId) && expandedElementCollection.length) {\n                expandedElementCollection[0].setAttribute('aria-expanded', 'false');\n                openElementCollection[0].classList.remove('submenu-list-open');\n            }\n        }\n        return;\n    }\n    keyDownHandler(evt) {\n        const { keyCode } = evt;\n\n        const expandedElementCollection = document.querySelectorAll('[aria-expanded=\"true\"]')[0];\n        const openSubmenu = document.getElementsByClassName('submenu-list-open')[0];\n\n        if (keyCode === 27 && openSubmenu) {\n            expandedElementCollection.setAttribute('aria-expanded', 'false');\n            openSubmenu.classList.remove('submenu-list-open');\n        }\n\n    }\n    hoverHandler(evt) {\n        const { type, target } = evt;\n        if (type === 'mouseout' && target.getAttribute('aria-haspopup') === \"true\") {\n            target.setAttribute('aria-expanded', 'false');\n        } else if (type === 'mouseover' && target.getAttribute('aria-haspopup') === \"false\") {\n            target.setAttribute('aria-expanded', 'true');\n        }\n    }\n    eventDispatcher(evt) {\n        // dispatch event listeners to the correct functions.\n        switch (evt.type) {\n            case 'click':\n                this.clickHandler(evt);\n                break;\n            case 'focusin':\n                this.focusInHandler(evt);\n                break;\n            case 'keydown':\n                this.keyDownHandler(evt);\n                break;\n            case 'mouseover':\n            case 'mouseout':\n                this.hoverHandler(evt);\n                break;\n            default:\n                return;\n                break;\n        }\n    }\n    setEventListeners() {\n        // if this script is running, remove the 'no-js' class from the elements.\n        const listElements = Array.prototype.slice.call(this.menu.getElementsByClassName('no-js'));\n        listElements.forEach(element => {\n            element.classList.remove('no-js');\n        });\n        // define a list of possible event listeners\n        let listeners = ['focusin', 'keydown', 'mouseover'];\n\n        if (this.click) {\n            listeners.push('click');\n        } else {\n            listeners.push('mouseout');\n        }\n        // attach them to the document.\n        for (let i = 0; i < listeners.length; i++) {\n            document.addEventListener(listeners[i], (evt) => {\n                // dispatch the events to the class methods.\n                this.eventDispatcher(evt);\n            });\n        }\n    }\n    setSubmenuIcon() {\n        // possible font-family for the icons\n        let fontFamily = this.fontFamily;\n\n        if (!this.fontFamilies.includes(fontFamily)) {\n            fontFamily = '';\n        }\n\n        // the list of all the submenu icons\n        const icons = this.menu.querySelectorAll('.submenu-icon');\n        // the css to inject into the page\n        const hoverCss = `\n      nav ul li span::before {\n        content: '${this.chevronDown}';\n        font-family: '${fontFamily}';\n        font-weight: bold;\n      }\n      nav ul.click-menu li > button[aria-expanded=\"true\"] span::before,\n      nav ul:not(.click-menu) li:hover > button span::before,\n      nav ul li:focus > button span::before { \n        content: '${this.chevronUp}';\n        font-family: '${fontFamily}'; \n        font-weight: bold;\n      }`;\n\n        // create a style tag\n        const style = document.createElement('style');\n        // add the styles to the tag (or a stylesheet if it exists)\n        if (style.styleSheet) {\n            style.styleSheet.cssText = hoverCss;\n        } else {\n            style.appendChild(document.createTextNode(hoverCss));\n        }\n        // add the tag to the <head>\n        document.getElementsByTagName('head')[0].appendChild(style);\n        // set the data-before attribute to the values passed in the constructor.\n        icons.forEach((icon) => {\n            icon.setAttribute('data-before', this.chevronDown);\n        })\n    }\n    init() {\n        this.menu = document.getElementById(this.menuId);\n        this.setEventListeners();\n        this.setSubmenuIcon();\n    }\n}\n\n"]}