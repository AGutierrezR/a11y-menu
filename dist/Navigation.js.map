{"version":3,"sources":["Navigation.js"],"names":["Navigation","_ref","arguments","length","undefined","_ref$menuId","menuId","_ref$click","click","_classCallCheck","this","hasNestedSubmenu","evt","target","type","getAttribute","setAttribute","_this","menu","contains","preventDefault","clearAll","localName","parentElement","document","querySelectorAll","submenuList","Array","from","nextSibling","add","el","toggleSubmenuMenuClass","nextElementSibling","submenuArray","getElementsByTagName","nextMenu","expandedButtonArray","openMenuArray","forEach","_this2","toggleButtonAria","previousElementSibling","parentNode","id","classList","toggle","button","prevButton","isSameNode","clearMenus","clearButtons","buttonArray","keyCode","clickHandler","_this3","element","remove","listeners","push","i","addEventListener","eventDispatcher","getElementById","setEventListeners"],"mappings":"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","file":"Navigation.js","sourcesContent":["class Navigation {\n    constructor({\n        menuId = 'am-main-menu',\n        click = false\n    } = {}) {\n        this.hasNestedSubmenu = false;\n        this.menu = null;\n        this.menuId = menuId;\n        this.click = click;\n    }\n\n    hoverHandler(evt) {\n        const { type, target } = evt;\n        if (type === 'mouseout' && target.getAttribute('aria-haspopup') === \"true\") {\n            target.setAttribute('aria-expanded', 'false');\n        } else if (type === 'mouseover' && target.getAttribute('aria-haspopup') === \"false\") {\n            target.setAttribute('aria-expanded', 'true');\n        }\n    }\n    /**\n     *\n     * Handle incoming clicks\n     *\n     * @param {object} evt object\n     * @returns void\n     * @memberof Navigation\n     */\n    clickHandler(evt) {\n        let target = evt.target;\n        let submenuList = null;\n\n        // if the click is inside the menu on a button, prevent the target from gaining focus and continue.\n        // otherwise do nothing.\n\n        if (!this.menu.contains(target) && (evt.type === 'mousedown' || evt.type === 'keydown')) {\n            this.clearAll();\n        } else if (this.menu.contains(target) && evt.type !== 'keydown') {\n            evt.preventDefault();\n        } \n\n        // people might click on the icon instead of the button.\n        // if so, set the target to the parent (button)\n        if (target.localName === 'span') {\n            target = target.parentElement;\n        }\n        \n        // if there's an open submenu with sub-submenus...\n        if (document.querySelectorAll('.am-submenu-list-open').length > 0 && !document.querySelectorAll('.am-submenu-list-open')[0].contains(target)) {\n\n            const submenuArray = Array.from(document.querySelectorAll('.am-submenu-list-open'));\n\n            if (target.nextSibling && target.nextSibling.localName === 'ul') {\n                // if you click from one menu item to another, open the next menu and close the previous one immediately.\n                const nextMenu = target.nextSibling;\n                nextMenu.classList.add('am-submenu-list-open');    \n            }\n            \n            submenuArray.forEach((el) => {\n                // toggle all the menus in the NodeList\n                this.toggleSubmenuMenuClass(el);\n            })\n            \n            this.toggleButtonAria(target);\n    \n        } else {\n            const nextSibling = target.nextElementSibling;\n            \n            // we're near a submenu by clicking on a button but the menu isn't initially open.\n            if (nextSibling !== null && nextSibling.localName === 'ul') {\n                submenuList = nextSibling;\n\n                // check if there's a nested submenu\n                submenuList.getElementsByTagName('ul').length ?\n                    this.hasNestedSubmenu = true :\n                    this.hasNestedSubmenu = false;\n        \n                this.toggleSubmenuMenuClass(submenuList);\n                this.toggleButtonAria(target);\n            } \n        }\n    }\n\n    /**\n     * \n     * Handle automatically closing the sub-menus.\n     * When a person opens a sub-menu and then leaves by tabbing, close the sub-menu.\n     * \n     * @param {object} evt\n     * @return - void\n     * @memberof Navigation\n     */\n    focusInHandler(evt) {\n        \n        const { target, target: { offsetParent: { parentNode } } } = evt;\n\n        let expandedButtonArray = Array.from(this.menu.querySelectorAll('[aria-expanded=\"true\"]'));\n        let openMenuArray = Array.from(this.menu.querySelectorAll('.am-submenu-list-open'));\n\n        if (!this.menu.contains(target) && expandedButtonArray.length) {\n            // if we leave the menu, clear everything\n            this.clearAll();\n        } else if (this.menu.contains(target) && openMenuArray.length > 1) {\n            // if focus is still in the menu and there's a sub-sub-menu, \n            // handle openning and closing when focus leaves.\n            openMenuArray.forEach(menu => {\n                if (!menu.contains(target)) {\n                    this.toggleSubmenuMenuClass(menu);\n                    this.toggleButtonAria(menu.previousElementSibling);\n                }\n            })\n        } else {\n            // still in the menu, but moving from one <li> to another\n            // toggle just the button and submenu for the elements that received focusout.\n            expandedButtonArray = Array.from(parentNode.querySelectorAll('[aria-expanded=\"true\"]'));\n            openMenuArray = Array.from(parentNode.querySelectorAll('.am-submenu-list-open'));\n            \n            // check to make sure that the user hasn't moved to a different menu.\n            if (parentNode.id === this.menuId) {\n                this.toggleButtonAria(expandedButtonArray[0]);\n                this.toggleSubmenuMenuClass(openMenuArray[0]);\n            }\n        }\n        return;\n    }\n\n    /**\n     * \n     * Toggle the class of the submenu element or reset the classes for all menus\n     *\n     * @param {object} el - a submenu (<ul>) element.\n     * @memberof Navigation\n     */\n    toggleSubmenuMenuClass(el) {\n        if (el !== null && el !== undefined) {\n            el.classList.toggle('am-submenu-list-open');\n        } else {\n            this.clearMenus();\n        }\n    }\n\n    /**\n     * \n     * Toggle the state of each button to reflect the aria-expanded state\n     *\n     * @param {*} target - the DOM element returned by evt.target\n     * @returns void\n     * @memberof Navigation\n     */\n    toggleButtonAria(target) {\n        const buttonNode = Array.from(document.querySelectorAll('.am-submenu-toggle'));\n        \n        buttonNode.forEach(button => {\n            // for each button, determine if there is a button \"above\" it\n            const prevButton = button.parentElement.parentElement.previousElementSibling;\n\n            // case - clicking on a sub-submenu button which is currently NOT expanded.\n            if (button.isSameNode(target) && button.getAttribute('aria-expanded') === 'false' && prevButton) {\n                // toggle the states of the previous button and the button/target\n                prevButton.setAttribute('aria-expanded', 'true');\n                button.setAttribute('aria-expanded', 'true');\n            }\n            // case - clicking on a sub-submenu button which is currently expanded.\n            else if (button.isSameNode(target) && button.getAttribute('aria-expanded') === 'true' && prevButton) {\n                // keep the previous button expanded and toggle the button/target\n                prevButton.setAttribute('aria-expanded', 'true');\n                button.setAttribute('aria-expanded', 'false');\n            } \n            // case - clicking on a top level button which is currently NOT expanded\n            else if (button.isSameNode(target) && button.getAttribute('aria-expanded') === 'false') {\n                // expand the button\n                button.setAttribute('aria-expanded', 'true');\n            } \n            // case - all other buttons\n            else {\n                // reset the state to false\n                button.setAttribute('aria-expanded', 'false')\n            }\n        });\n        return;\n    }\n\n    /**\n     * Close all submenus\n     * \n     * @returns void\n     * @memberof Navigation\n     */\n    clearMenus() {\n        const menuArray = Array.from(this.menu.querySelectorAll('.am-submenu-list-open'));\n        menuArray.forEach(menu => {\n            menu.classList.toggle('am-submenu-list-open');\n        })\n        return;\n    }\n\n    /**\n     * Toggle all visual icons and set aria-expanded to false.\n     *\n     * @returns void\n     * @memberof Navigation\n     */\n    clearButtons() {\n        const buttonArray = Array.from(this.menu.querySelectorAll('.am-submenu-toggle'))\n        buttonArray.forEach((button) => {\n            button.setAttribute('aria-expanded', 'false');\n        })\n        return;\n    }\n\n    /**\n     * \n     * Completely reset the state of the menu\n     * \n     * @returns void\n     * @memberof Navigation\n     */\n    clearAll() {\n        this.clearMenus();\n        this.clearButtons();\n        return;\n    }\n\n    /**\n     *\n     * dispatch events to the correct functions.\n     * types include: click, focusin, keydown, mousedown\n     *\n     * @param {object} evt\n     * @returns void\n     * @memberof Navigation\n     */\n    eventDispatcher(evt) {\n        \n        // mousedown focusin click\n        // keydown focusin keydown click\n        switch (evt.type) {\n            case 'focusin':\n                this.focusInHandler(evt);\n                break;\n            case 'keydown':\n                if (evt.keyCode === 13) {\n                    // if the keydown is caused by the return key, it should be a click\n                    this.clickHandler(evt);\n                } else if (evt.keyCode === 27) {\n                    // if the keydown is caused by the escape key, close the menus\n                    this.clearAll();\n                } else {\n                    // throw away all other events.\n                    return;\n                }\n                break;\n            \n            case 'mousedown':\n                this.clickHandler(evt);\n                break;\n            \n            default:\n                return;\n        }\n    }\n\n    /**\n     *\n     * Remove the no-js class and attach event listeners\n     * \n     * @memberof Navigation\n     */\n    setEventListeners() {\n        // if this script is running, remove the 'no-js' class from the elements.\n        const listElements = Array.from(this.menu.querySelectorAll('.no-js'));\n        listElements.forEach(element => {\n            element.classList.remove('no-js');\n        });\n        // define a list of possible event listeners\n        let listeners = ['focusin', 'keydown', 'mouseover'];\n\n        if (this.click) {\n            listeners.push('mousedown');\n            \n            const subMenuList = Array.from(this.menu.querySelectorAll('.am-submenu-list'));\n            \n            subMenuList.forEach(menu => menu.classList.add('am-click-menu'));\n\n        } else {\n            listeners.push('mouseout');\n        }\n        // attach them to the document.\n        for (let i = 0; i < listeners.length; i++) {\n            document.addEventListener(listeners[i], (evt) => {\n                // dispatch the events to the class methods.\n                this.eventDispatcher(evt);\n            });\n        }\n    }\n\n    /**\n     * \n     * Initialize the menu by\n     * - assigning the menu\n     * - attaching event listeners\n     *\n     * @memberof Navigation\n     */\n    init() {\n        this.menu = document.getElementById(this.menuId);\n        this.setEventListeners();\n    }\n}\n\n"]}