{"version":3,"sources":["Navigation.js"],"names":["Navigation","constructor","menuId","fontFamily","chevronDown","chevronUp","this","fontFamilies","hasNestedSubmenu","menu","chevronSwitcher","element","children","icon","getAttribute","clickHandler","setAttribute","submenuList","target","evt","getElementsByTagName","length","preventDefault","classList","toggle","contains","focusInHandler","parentNode","parentUL","offsetParent","expandedElementCollection","querySelectorAll","getElementsByClassName","openElementCollection","remove","hoverHandler","type","eventDispatcher","setEventListeners","prototype","slice","call","forEach","listeners","i","setSubmenuIcon","includes","hoverCss","style","styleSheet","createElement","appendChild","cssText","createTextNode","document","icons","init","getElementById"],"mappings":"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","file":"Navigation.js","sourcesContent":["class Navigation {\n  constructor(\n    {\n      menuId = 'main-menu',\n      fontFamily = 'Font Awesome 5 Free',\n      chevronDown = '\\\\f078',\n      chevronUp = '\\\\f077'\n    } = {}\n  ) {\n    this.chevronDown = chevronDown;\n    this.chevronUp = chevronUp;\n    this.fontFamilies = ['FontAwesome', 'Font Awesome 5 Free', 'Glyphicons Halflings'];\n    this.fontFamily = fontFamily;\n    this.hasNestedSubmenu = false;\n    this.menu = null;\n    this.menuId = menuId;\n  }\n  chevronSwitcher(element) {\n    if (element.localName !== \"button\") return;\n    \n    const icon = element.children[0];\n\n    element.getAttribute('aria-expanded') === 'true' ? icon.setAttribute('data-before', this.chevronUp) : icon.setAttribute('data-before', this.chevronDown);\n  }\n  clickHandler(evt) {\n    const target = evt.target;\n    const submenuList = target.nextSibling;\n    // find out if there is a nested submenu inside a top level item\n    submenuList.getElementsByTagName('ul').length ? this.hasNestedSubmenu = true : this.hasNestedSubmenu = false;\n    // if something weird happens, don't allow any further event handling.\n    if (!target.getAttribute('aria-haspopup')) return;\n\n    // if we're on a list item that is really just a toggle, \n    // that is it doesn't have a page that it goes to, prevent the page from reloading.\n    target.className === 'submenu-toggle' ? evt.preventDefault() : null;\n\n    submenuList.classList.toggle('submenu-list-open');\n    target.setAttribute('aria-expanded', 'true');\n\n    submenuList.classList.contains('submenu-list-open') ? null : target.setAttribute('aria-expanded', 'false');\n\n    if (target.children) {\n      this.chevronSwitcher(target);\n    }\n  }\n  focusInHandler(evt) {\n    const { target, relatedTarget } = evt;\n    const { parentNode, offsetParent } = target;\n    const parentUL = offsetParent.parentNode;\n \n    // if the parentUL isn't the menu and it contains the target return\n    if (parentUL !== this.menu && parentUL.contains(target)) {\n      return\n    } else {\n      // close the submenu when you leave\n      const expandedElementCollection = parentUL.querySelectorAll('[aria-expanded=\"true\"]');\n      const openElementCollection = parentUL.getElementsByClassName('submenu-list-open');\n\n      if (expandedElementCollection.length) {\n        expandedElementCollection[0].setAttribute('aria-expanded', 'false');\n        openElementCollection[0].classList.remove('submenu-list-open');\n        this.chevronSwitcher(expandedElementCollection[0]);\n      }\n    }\n  }\n  hoverHandler(evt) {\n    const { type, target } = evt;\n    if (type === 'mouseout' && target.getAttribute('aria-haspopup') === \"true\") {\n      target.setAttribute('aria-expanded', 'false');\n    } else if (type === 'mouseover' && target.getAttribute('aria-haspopup') === \"false\") {\n      target.setAttribute('aria-expanded', 'true');\n    }\n\n    // if you hover and the htmlcollection length is greater than 0\n    if (target.children.length > 0) {\n      this.chevronSwitcher(target);\n    }\n  }\n  eventDispatcher(evt) {\n    // dispatch event listeners to the correct functions.\n    switch (evt.type) {\n      case 'click':\n        this.clickHandler(evt);\n        break;\n      case 'focusin':\n        this.focusInHandler(evt);\n        break;\n      case 'mouseover':\n      case 'mouseout':\n        this.hoverHandler(evt);\n        break;\n      default:\n        return;\n        break;\n    }\n  }\n  setEventListeners() {\n    // if this script is running, remove the 'no-js' class from the elements.\n    const listElements = Array.prototype.slice.call(this.menu.getElementsByClassName('no-js'));\n    listElements.forEach(element => {\n      element.classList.remove('no-js');\n    });\n    // define a list of possible event listeners\n    const listeners = ['click', 'focusin', 'mouseout', 'mouseover'];\n    // attach them to the menu.\n    for (let i = 0; i < listeners.length; i++) {\n      this.menu.addEventListener(listeners[i], (evt) => {\n        // dispatch the events to the class methods.\n        this.eventDispatcher(evt);\n      });\n    }\n  }\n  setSubmenuIcon() {\n    // possible font-family for the icons\n    let fontFamily = this.fontFamily;\n\n    if (!this.fontFamilies.includes(fontFamily)) {\n      fontFamily = '';\n    }\n\n    // the list of all the submenu icons\n    const icons = this.menu.querySelectorAll('.submenu-icon');\n    // the css to inject into the page\n    const hoverCss = `\n      nav ul li span::before {\n        content: '${this.chevronDown}';\n        font-family: '${fontFamily}';\n        font-weight: bold;\n      }\n      nav ul li:hover > button span::before,\n      nav ul li:focus > button span::before { \n        content: '${this.chevronUp}';\n        font-family: '${fontFamily}'; \n        font-weight: bold;\n      }`;\n\n    // create a style tag\n    const style = document.createElement('style');\n    // add the styles to the tag (or a stylesheet if it exists)\n    if (style.styleSheet) {\n      style.styleSheet.cssText = hoverCss;\n    } else {\n      style.appendChild(document.createTextNode(hoverCss));\n    }\n    // add the tag to the <head>\n    document.getElementsByTagName('head')[0].appendChild(style);\n    // set the data-before attribute to the values passed in the constructor.\n    icons.forEach((icon) => {\n      icon.setAttribute('data-before', this.chevronDown);\n    })\n  }\n  init() {\n    this.menu = document.getElementById(this.menuId);\n    this.setEventListeners();\n    this.setSubmenuIcon();\n  }\n}\n"]}