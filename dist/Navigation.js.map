{"version":3,"sources":["Navigation.js"],"names":["Navigation","constructor","menuId","fontFamily","chevronDown","chevronUp","click","this","fontFamilies","hasNestedSubmenu","menu","clickHandler","evt","target","submenuList","localName","parentElement","nextSibling","console","log","document","getElementsByClassName","getElementsByTagName","getAttribute","length","classList","toggle","preventDefault","focusInHandler","contains","setAttribute","offsetParent","parentNode","expandedElementCollection","querySelectorAll","keyDownHandler","keyCode","openSubmenu","remove","type","eventDispatcher","hoverHandler","listElements","Array","prototype","slice","call","forEach","element","listeners","push","i","addEventListener","setSubmenuIcon","includes","icons","hoverCss","style","styleSheet","cssText","appendChild","createTextNode","icon","init","getElementById","setEventListeners"],"mappings":"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","file":"Navigation.js","sourcesContent":["class Navigation {\n    constructor({\n        menuId = 'main-menu',\n        fontFamily = 'Font Awesome 5 Free',\n        chevronDown = '\\\\f078',\n        chevronUp = '\\\\f077',\n        click = false\n    } = {}) {\n        this.chevronDown = chevronDown;\n        this.chevronUp = chevronUp;\n        this.fontFamilies = ['FontAwesome', 'Font Awesome 5 Free', 'Glyphicons Halflings'];\n        this.fontFamily = fontFamily;\n        this.hasNestedSubmenu = false;\n        this.menu = null;\n        this.menuId = menuId;\n        this.click = click;\n    }\n    clickHandler(evt) {\n        let { target } = evt;\n        let submenuList = null;\n        if (target.localName == \"span\") {\n            target = target.parentElement;\n        }\n        // if the target is the body\n        // if (target.nextSibling === null) {\n        //     // target = document;\n        //     console.log(document);\n        // }\n        \n        if (target.nextSibling === null || target.nextSibling.localName !== 'ul') {\n            console.log('not a ul')\n            submenuList = document.getElementsByClassName('submenu-list-open')\n        } else {\n            submenuList = target.nextSibling;\n        }\n\n\n\n        console.log(target.nextSibling)\n        // find out if there is a nested submenu inside a top level item\n        submenuList.getElementsByTagName('ul').length ? this.hasNestedSubmenu = true : this.hasNestedSubmenu = false;\n        // if something weird happens, don't allow any further event handling.\n        if (!target.getAttribute('aria-haspopup')) return;\n\n        // if we're on a list item that is really just a toggle, \n        // that is it doesn't have a page that it goes to, prevent the page from reloading.\n        target.classList.contains('submenu-toggle') ? evt.preventDefault() : null;\n\n        submenuList.classList.toggle('submenu-list-open');\n        target.setAttribute('aria-expanded', 'true');\n\n        submenuList.classList.contains('submenu-list-open') ? null : target.setAttribute('aria-expanded', 'false');\n    }\n    focusInHandler(evt) {\n        const { target } = evt;\n        const { offsetParent: { parentNode } } = target;\n\n        // if the parentUL isn't the menu and it contains the target return\n        if (parentNode !== this.menu && parentNode.contains(target)) {\n            return\n        } else {\n            // close the submenu when you leave\n            const expandedElementCollection = parentNode.querySelectorAll('[aria-expanded=\"true\"]');\n            const openElementCollection = parentNode.getElementsByClassName('submenu-list-open');\n\n            if (expandedElementCollection.length) {\n                // expandedElementCollection[0].setAttribute('aria-expanded', 'false');\n                // openElementCollection[0].classList.remove('submenu-list-open');\n            }\n        }\n    }\n    keyDownHandler(evt) {\n        const { keyCode, target } = evt;\n        // const { offsetParent: { parentNode } } = target;\n        // const expandedElementCollection = parentNode.querySelectorAll('[aria-expanded=\"true\"]')[0];\n        // const openSubmenu = parentNode.getElementsByClassName('submenu-list-open')[0];\n        const expandedElementCollection = document.querySelectorAll('[aria-expanded=\"true\"]')[0];\n        const openSubmenu = document.getElementsByClassName('submenu-list-open')[0];\n        console.log(openSubmenu)\n        if (keyCode === 27 && openSubmenu) {\n            expandedElementCollection.setAttribute('aria-expanded', 'false');\n            openSubmenu.classList.remove('submenu-list-open');\n        }\n\n    }\n    hoverHandler(evt) {\n        const { type, target } = evt;\n        if (type === 'mouseout' && target.getAttribute('aria-haspopup') === \"true\") {\n            target.setAttribute('aria-expanded', 'false');\n        } else if (type === 'mouseover' && target.getAttribute('aria-haspopup') === \"false\") {\n            target.setAttribute('aria-expanded', 'true');\n        }\n    }\n    eventDispatcher(evt) {\n        // dispatch event listeners to the correct functions.\n        switch (evt.type) {\n            case 'click':\n                this.clickHandler(evt);\n                break;\n            case 'focusin':\n                this.focusInHandler(evt);\n                break;\n            case 'keydown':\n                this.keyDownHandler(evt);\n                break;\n            case 'mouseover':\n            case 'mouseout':\n                this.hoverHandler(evt);\n                break;\n            default:\n                return;\n                break;\n        }\n    }\n    setEventListeners() {\n        // if this script is running, remove the 'no-js' class from the elements.\n        const listElements = Array.prototype.slice.call(this.menu.getElementsByClassName('no-js'));\n        listElements.forEach(element => {\n            element.classList.remove('no-js');\n        });\n        // define a list of possible event listeners\n        let listeners = ['focusin', 'keydown', 'mouseover'];\n\n        if (this.click) {\n            listeners.push('click');\n        } else {\n            listeners.push('mouseout');\n        }\n        // attach them to the document.\n        for (let i = 0; i < listeners.length; i++) {\n            document.addEventListener(listeners[i], (evt) => {\n                // dispatch the events to the class methods.\n                this.eventDispatcher(evt);\n            });\n        }\n    }\n    setSubmenuIcon() {\n        // possible font-family for the icons\n        let fontFamily = this.fontFamily;\n\n        if (!this.fontFamilies.includes(fontFamily)) {\n            fontFamily = '';\n        }\n\n        // the list of all the submenu icons\n        const icons = this.menu.querySelectorAll('.submenu-icon');\n        // the css to inject into the page\n        const hoverCss = `\n      nav ul li span::before {\n        content: '${this.chevronDown}';\n        font-family: '${fontFamily}';\n        font-weight: bold;\n      }\n      nav ul.click-menu li > button[aria-expanded=\"true\"] span::before,\n      nav ul:not(.click-menu) li:hover > button span::before,\n      nav ul li:focus > button span::before { \n        content: '${this.chevronUp}';\n        font-family: '${fontFamily}'; \n        font-weight: bold;\n      }`;\n\n        // create a style tag\n        const style = document.createElement('style');\n        // add the styles to the tag (or a stylesheet if it exists)\n        if (style.styleSheet) {\n            style.styleSheet.cssText = hoverCss;\n        } else {\n            style.appendChild(document.createTextNode(hoverCss));\n        }\n        // add the tag to the <head>\n        document.getElementsByTagName('head')[0].appendChild(style);\n        // set the data-before attribute to the values passed in the constructor.\n        icons.forEach((icon) => {\n            icon.setAttribute('data-before', this.chevronDown);\n        })\n    }\n    init() {\n        this.menu = document.getElementById(this.menuId);\n        this.setEventListeners();\n        this.setSubmenuIcon();\n    }\n}\n\n"]}