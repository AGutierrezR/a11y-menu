{"version":3,"sources":["Navigation.js"],"names":["Navigation","_ref","arguments","length","undefined","_ref$menuId","menuId","_ref$fontFamily","fontFamily","_ref$chevronDown","chevronDown","_ref$chevronUp","chevronUp","_ref$click","_classCallCheck","this","menu","click","evt","type","target","getAttribute","setAttribute","hasNestedSubmenu","submenuList","localName","parentElement","document","querySelectorAll","contains","nextSibling","classList","add","submenuNodeList","forEach","el","toggleButtonAria","console","log","toggleSubmenuMenuClass","nextMenu","getElementsByTagName","expandedButtonNode","openElementCollection","clearAll","parentNode","getElementsByClassName","id","toggle","clearMenus","button","menuNode","prevButton","previousElementSibling","isSameNode","buttonNode","clearButtons","keyCode","clickHandler","_this2","Array","prototype","slice","call","element","remove","listeners","push","i","addEventListener","eventDispatcher","_this3","fontFamilies","includes","icons","hoverCss","listElements","style","styleSheet","cssText","appendChild","icon","getElementById","setEventListeners","setSubmenuIcon"],"mappings":"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","file":"Navigation.js","sourcesContent":["class Navigation {\n    constructor({\n        menuId = 'main-menu',\n        fontFamily = 'Font Awesome 5 Free',\n        chevronDown = '\\\\f078',\n        chevronUp = '\\\\f077',\n        click = false\n    } = {}) {\n        this.chevronDown = chevronDown;\n        this.chevronUp = chevronUp;\n        this.fontFamilies = ['FontAwesome', 'Font Awesome 5 Free', 'Glyphicons Halflings'];\n        this.fontFamily = fontFamily;\n        this.hasNestedSubmenu = false;\n        this.menu = null;\n        this.menuId = menuId;\n        this.click = click;\n    }\n\n    hoverHandler(evt) {\n        const { type, target } = evt;\n        if (type === 'mouseout' && target.getAttribute('aria-haspopup') === \"true\") {\n            target.setAttribute('aria-expanded', 'false');\n        } else if (type === 'mouseover' && target.getAttribute('aria-haspopup') === \"false\") {\n            target.setAttribute('aria-expanded', 'true');\n        }\n    }\n    clickHandler(evt) {\n        let { target } = evt;\n        let submenuList = null;\n\n        // people might click on the icon instead of the button.\n        // if so, set the target to the parent (button)\n        if (target.localName === 'span') {\n            target = target.parentElement;\n        }\n        \n        // if there's an open submenu with sub-submenus...\n        if (document.querySelectorAll('.submenu-list-open').length > 0 && !document.querySelectorAll('.submenu-list-open')[0].contains(target)) {\n            \n            const submenuNodeList = document.querySelectorAll('.submenu-list-open');\n\n            if (target.nextSibling && target.nextSibling.localName === 'ul') {\n                // if you click from one menu item to another, open the next menu and close the previous one immediately.\n                const nextMenu = target.nextSibling;\n                nextMenu.classList.add('submenu-list-open');    \n            }\n            \n            submenuNodeList.forEach((el) => {\n                // toggle all the menus in the NodeList\n                this.toggleSubmenuMenuClass(el);\n            })\n            \n            \n            this.toggleButtonAria(target);\n    \n        } else {\n            // we're near a submenu by clicking on a button but the menu isn't initially open.\n            if (target.nextSibling !== null) {\n                console.log(target)\n                submenuList = target.nextSibling;\n\n                // check if there's a nested submenu\n                submenuList.getElementsByTagName('ul').length ?\n                    this.hasNestedSubmenu = true :\n                    this.hasNestedSubmenu = false;\n        \n                this.toggleSubmenuMenuClass(submenuList);\n                this.toggleButtonAria(target);\n            } \n        }\n    }\n\n    /**\n     * \n     * Handle automatically closing the sub-menus.\n     * When a person opens a sub-menu and then leaves by tabbing, close the sub-menu.\n     * \n     * @param {object} evt\n     * @return - void\n     * @memberof Navigation\n     */\n    focusInHandler(evt) {\n        \n        const { target, target: { offsetParent: { parentNode } } } = evt;\n\n        let expandedButtonNode = this.menu.querySelectorAll('[aria-expanded=\"true\"]');\n        let openElementCollection = this.menu.getElementsByClassName('submenu-list-open');\n\n        // if we leave the menu, clear everything\n        if (!this.menu.contains(target) && expandedButtonNode.length) {\n            this.clearAll();\n        } else {\n            // still in the menu, but moving from one <li> to another\n            // toggle just the button and submenu for the elements that received focusout.\n            expandedButtonNode = parentNode.querySelectorAll('[aria-expanded=\"true\"]');\n            openElementCollection = parentNode.getElementsByClassName('submenu-list-open');\n            \n            // check to make sure that the user hasn't moved to a different menu.\n            if (parentNode.id === this.menuId) {\n                this.toggleButtonAria(expandedButtonNode[0]);\n                this.toggleSubmenuMenuClass(openElementCollection[0]);\n            }\n        }\n        return;\n    }\n\n    /**\n     * \n     * Toggle the class of the submenu element or reset the classes for all menus\n     *\n     * @param {object} el - a submenu (<ul>) element.\n     * @memberof Navigation\n     */\n    toggleSubmenuMenuClass(el) {\n        if (el !== null && el !== undefined) {\n            el.classList.toggle('submenu-list-open');\n        } else {\n            this.clearMenus();\n        }\n    }\n\n    /**\n     * Close all submenus\n     * \n     * @returns void\n     * @memberof Navigation\n     */\n    clearMenus() {\n        const menuNode = document.querySelectorAll('.submenu-list-open');\n        menuNode.forEach(menu => {\n            menu.classList.toggle('submenu-list-open');\n        })\n        return;\n    }\n\n    /**\n     * Toggle all visual icons and set aria-expanded to false.\n     *\n     * @returns void\n     * @memberof Navigation\n     */\n    clearButtons() {\n        const buttonNode = document.querySelectorAll('.submenu-toggle');\n        buttonNode.forEach((button) => {\n            button.setAttribute('aria-expanded', 'false');\n        })\n        return;\n    }\n\n    /**\n     * \n     * Toggle the state of each button to reflect the aria-expanded state\n     *\n     * @param {*} target - the DOM element returned by evt.target\n     * @returns void\n     * @memberof Navigation\n     */\n    toggleButtonAria(target) {\n        const buttonNode = document.querySelectorAll('.submenu-toggle');\n        \n        buttonNode.forEach(button => {\n            // for each button, determine if there is a button \"above\" it\n            const prevButton = button.parentElement.parentElement.previousElementSibling;\n            \n            // case - clicking on a sub-submenu button which is currently NOT expanded.\n            if (button.isSameNode(target) && button.getAttribute('aria-expanded') === 'false' && prevButton) {\n                // toggle the states of the previous button and the button/target\n                prevButton.setAttribute('aria-expanded', 'true');\n                button.setAttribute('aria-expanded', 'true');\n            }\n            // case - clicking on a sub-submenu button which is currently expanded.\n            else if (button.isSameNode(target) && button.getAttribute('aria-expanded') === 'true' && prevButton) {\n                // keep the previous button expanded and toggle the button/target\n                prevButton.setAttribute('aria-expanded', 'true');\n                button.setAttribute('aria-expanded', 'false');\n            } \n            // case - clicking on a top level button which is currently NOT expanded\n            else if (button.isSameNode(target) && button.getAttribute('aria-expanded') === 'false') {\n                // expand the button\n                button.setAttribute('aria-expanded', 'true');\n            } \n            // case - all other buttons\n            else {\n                // reset the state to false\n                button.setAttribute('aria-expanded', 'false')\n            }\n        });\n        return;\n    }\n\n    /**\n     * \n     * Completely reset the state of the menu\n     * \n     * @returns void\n     * @memberof Navigation\n     */\n    clearAll() {\n        this.clearMenus();\n        this.clearButtons();\n        return;\n    }\n\n    /**\n     *\n     * dispatch events to the correct functions.\n     * types include: click, focusin, keydown, mousedown\n     *\n     * @param {object} evt\n     * @returns void\n     * @memberof Navigation\n     */\n    eventDispatcher(evt) {\n        \n        // mousedown focusin click\n        // keydown focusin keydown click\n\n        switch (evt.type) {\n            case 'focusin':\n                this.focusInHandler(evt);\n                break;\n            case 'keydown':\n                if (evt.keyCode === 13) {\n                    // if the keydown is caused by the return key, it should be a click\n                    this.clickHandler(evt);\n                } else if (evt.keyCode === 27) {\n                    // if the keydown is caused by the escape key, close the menus\n                    this.clearAll();\n                } else {\n                    // throw away all other events.\n                    return;\n                }\n                break;\n            \n            case 'mousedown':\n                // if the event was caused by the mouse, don't let the target gain focus.\n                evt.preventDefault();\n                this.clickHandler(evt);\n                break;\n            \n            default:\n                return;\n        }\n    }\n\n    /**\n     *\n     * Remove the no-js class and attach event listeners\n     * \n     * @memberof Navigation\n     */\n    setEventListeners() {\n        // if this script is running, remove the 'no-js' class from the elements.\n        const listElements = Array.prototype.slice.call(this.menu.getElementsByClassName('no-js'));\n        listElements.forEach(element => {\n            element.classList.remove('no-js');\n        });\n        // define a list of possible event listeners\n        let listeners = ['click', 'focusin', 'keydown', 'mouseover'];\n\n        if (this.click) {\n            listeners.push('mousedown', 'mouseup');\n            \n            const subMenuList = this.menu.querySelectorAll('.submenu-list');\n            \n            subMenuList.forEach(menu => menu.classList.add('click-menu'));\n\n        } else {\n            listeners.push('mouseout');\n        }\n        // attach them to the document.\n        for (let i = 0; i < listeners.length; i++) {\n            document.addEventListener(listeners[i], (evt) => {\n                // dispatch the events to the class methods.\n                this.eventDispatcher(evt);\n            });\n        }\n    }\n\n    /**\n     *\n     * Inline styles to the <head> for the visual indicators\n     * \n     * @returns void\n     * @memberof Navigation\n     */\n    setSubmenuIcon() {\n        // possible font-family for the icons\n        let fontFamily = this.fontFamily;\n\n        if (!this.fontFamilies.includes(fontFamily)) {\n            fontFamily = '';\n        }\n\n        // the list of all the submenu icons\n        const icons = this.menu.querySelectorAll('.submenu-icon');\n        // the css to inject into the page\n        const hoverCss = `\n            nav ul li span::before {\n                content: '${this.chevronDown}';\n                font-family: '${fontFamily}';\n                font-weight: bold;\n            }\n            nav ul.click-menu li > button[aria-expanded=\"true\"] span::before,\n            nav ul:not(.click-menu) li:hover > button span::before,\n            nav ul li:focus > button span::before { \n                content: '${this.chevronUp}';\n                font-family: '${fontFamily}'; \n                font-weight: bold;\n            }`;\n\n        // create a style tag\n        const style = document.createElement('style');\n\n        // add the styles to the tag (or a stylesheet if it exists)\n        if (style.styleSheet) {\n            style.styleSheet.cssText = hoverCss;\n        } else {\n            style.appendChild(document.createTextNode(hoverCss));\n        }\n\n        // add the tag to the <head>\n        document.getElementsByTagName('head')[0].appendChild(style);\n\n        // set the data-before attribute to the values passed in the constructor.\n        icons.forEach((icon) => icon.setAttribute('data-before', this.chevronDown));\n\n        return;\n    }\n\n    /**\n     * \n     * Initialize the menu by\n     * - attaching event listeners\n     * - adding styles to the <head>\n     *\n     * @memberof Navigation\n     */\n    init() {\n        this.menu = document.getElementById(this.menuId);\n        this.setEventListeners();\n        this.setSubmenuIcon();\n    }\n}\n\n"]}