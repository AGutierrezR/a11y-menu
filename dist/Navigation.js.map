{"version":3,"sources":["Navigation.js"],"names":["require","Navigation","_ref","arguments","length","undefined","_ref$menuId","menuId","_ref$click","click","_classCallCheck","this","hasNestedSubmenu","evt","target","type","getAttribute","setAttribute","_this","menu","contains","localName","preventDefault","parentElement","document","querySelectorAll","submenuArray","Array","from","nextSibling","classList","add","forEach","el","toggleSubmenuMenuClass","submenuList","nextMenu","toggleButtonAria","clearAll","_this2","parentNode","expandedButtonArray","openMenuArray","previousElementSibling","offsetParent","toggle","clearMenus","button","prevButton","isSameNode","buttonNode","clearButtons","focusInHandler","keyCode","clickHandler","_this3","getElementsByClassName","element","remove","listeners","push","i","addEventListener","eventDispatcher","getElementById","setEventListeners"],"mappings":"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","file":"Navigation.js","sourcesContent":["// polyfill to support IE\nimport '@babel/polyfill';\n\nclass Navigation {\n    constructor({\n        menuId = 'main-menu',\n        click = false\n    } = {}) {\n        this.hasNestedSubmenu = false;\n        this.menu = null;\n        this.menuId = menuId;\n        this.click = click;\n    }\n\n    hoverHandler(evt) {\n        const { type, target } = evt;\n        if (type === 'mouseout' && target.getAttribute('aria-haspopup') === \"true\") {\n            target.setAttribute('aria-expanded', 'false');\n        } else if (type === 'mouseover' && target.getAttribute('aria-haspopup') === \"false\") {\n            target.setAttribute('aria-expanded', 'true');\n        }\n    }\n    /**\n     *\n     * Handle incoming clicks\n     *\n     * @param {object} evt object\n     * @returns void\n     * @memberof Navigation\n     */\n    clickHandler(evt) {\n        let target = evt.target;\n        let submenuList = null;\n\n        // if the click is inside the menu on a button, prevent the target from gaining focus and continue.\n        // otherwise do nothing.\n        if (this.menu.contains(target) && target.localName !== 'a') {\n            evt.preventDefault();\n        } else {\n            // the click is on a link or outside the menu so it should be cleared.\n            this.clearAll();\n            return;\n        }\n\n        // people might click on the icon instead of the button.\n        // if so, set the target to the parent (button)\n        if (target.localName === 'span') {\n            target = target.parentElement;\n        }\n        \n        // if there's an open submenu with sub-submenus...\n        if (document.querySelectorAll('.submenu-list-open').length > 0 && !document.querySelectorAll('.submenu-list-open')[0].contains(target)) {\n            \n            const submenuArray = Array.from(document.querySelectorAll('.submenu-list-open'));\n\n            if (target.nextSibling && target.nextSibling.localName === 'ul') {\n                // if you click from one menu item to another, open the next menu and close the previous one immediately.\n                const nextMenu = target.nextSibling;\n                nextMenu.classList.add('submenu-list-open');    \n            }\n            \n            submenuArray.forEach((el) => {\n                // toggle all the menus in the NodeList\n                this.toggleSubmenuMenuClass(el);\n            })\n            \n            \n            this.toggleButtonAria(target);\n    \n        } else {\n            // we're near a submenu by clicking on a button but the menu isn't initially open.\n            if (target.nextSibling !== null) {\n                submenuList = target.nextSibling;\n\n                // check if there's a nested submenu\n                submenuList.getElementsByTagName('ul').length ?\n                    this.hasNestedSubmenu = true :\n                    this.hasNestedSubmenu = false;\n        \n                this.toggleSubmenuMenuClass(submenuList);\n                this.toggleButtonAria(target);\n            } \n        }\n    }\n\n    /**\n     * \n     * Handle automatically closing the sub-menus.\n     * When a person opens a sub-menu and then leaves by tabbing, close the sub-menu.\n     * \n     * @param {object} evt\n     * @return - void\n     * @memberof Navigation\n     */\n    focusInHandler(evt) {\n        \n        const { target, target: { offsetParent: { parentNode } } } = evt;\n\n        let expandedButtonArray = Array.from(this.menu.querySelectorAll('[aria-expanded=\"true\"]'));\n        let openMenuArray = Array.from(this.menu.querySelectorAll('.submenu-list-open'));\n\n        if (!this.menu.contains(target) && expandedButtonArray.length) {\n            // if we leave the menu, clear everything\n            this.clearAll();\n        } else if (this.menu.contains(target) && openMenuArray.length > 1) {\n            // if focus is still in the menu and there's a sub-sub-menu, \n            // handle openning and closing when focus leaves.\n            openMenuArray.forEach(menu => {\n                if (!menu.contains(target)) {\n                    this.toggleSubmenuMenuClass(menu);\n                    this.toggleButtonAria(menu.previousElementSibling);\n                }\n            })\n        } else {\n            // still in the menu, but moving from one <li> to another\n            // toggle just the button and submenu for the elements that received focusout.\n            expandedButtonArray = Array.from(parentNode.querySelectorAll('[aria-expanded=\"true\"]'));\n            openMenuArray = Array.from(parentNode.querySelectorAll('.submenu-list-open'));\n            \n            // check to make sure that the user hasn't moved to a different menu.\n            if (parentNode.id === this.menuId) {\n                this.toggleButtonAria(expandedButtonArray[0]);\n                this.toggleSubmenuMenuClass(openMenuArray[0]);\n            }\n        }\n        return;\n    }\n\n    /**\n     * \n     * Toggle the class of the submenu element or reset the classes for all menus\n     *\n     * @param {object} el - a submenu (<ul>) element.\n     * @memberof Navigation\n     */\n    toggleSubmenuMenuClass(el) {\n        if (el !== null && el !== undefined) {\n            el.classList.toggle('submenu-list-open');\n        } else {\n            this.clearMenus();\n        }\n    }\n\n    /**\n     * Close all submenus\n     * \n     * @returns void\n     * @memberof Navigation\n     */\n    clearMenus() {\n        const menuNode = Array.from(document.querySelectorAll('.submenu-list-open'));\n        menuNode.forEach(menu => {\n            menu.classList.toggle('submenu-list-open');\n        })\n        return;\n    }\n\n    /**\n     * Toggle all visual icons and set aria-expanded to false.\n     *\n     * @returns void\n     * @memberof Navigation\n     */\n    clearButtons() {\n        const buttonNode = Array.from(document.querySelectorAll('.submenu-toggle'));\n        buttonNode.forEach((button) => {\n            button.setAttribute('aria-expanded', 'false');\n        })\n        return;\n    }\n\n    /**\n     * \n     * Toggle the state of each button to reflect the aria-expanded state\n     *\n     * @param {*} target - the DOM element returned by evt.target\n     * @returns void\n     * @memberof Navigation\n     */\n    toggleButtonAria(target) {\n        const buttonNode = Array.from(document.querySelectorAll('.submenu-toggle'));\n        \n        buttonNode.forEach(button => {\n            // for each button, determine if there is a button \"above\" it\n            const prevButton = button.parentElement.parentElement.previousElementSibling;\n            \n            // case - clicking on a sub-submenu button which is currently NOT expanded.\n            if (button.isSameNode(target) && button.getAttribute('aria-expanded') === 'false' && prevButton) {\n                // toggle the states of the previous button and the button/target\n                prevButton.setAttribute('aria-expanded', 'true');\n                button.setAttribute('aria-expanded', 'true');\n            }\n            // case - clicking on a sub-submenu button which is currently expanded.\n            else if (button.isSameNode(target) && button.getAttribute('aria-expanded') === 'true' && prevButton) {\n                // keep the previous button expanded and toggle the button/target\n                prevButton.setAttribute('aria-expanded', 'true');\n                button.setAttribute('aria-expanded', 'false');\n            } \n            // case - clicking on a top level button which is currently NOT expanded\n            else if (button.isSameNode(target) && button.getAttribute('aria-expanded') === 'false') {\n                // expand the button\n                button.setAttribute('aria-expanded', 'true');\n            } \n            // case - all other buttons\n            else {\n                // reset the state to false\n                button.setAttribute('aria-expanded', 'false')\n            }\n        });\n        return;\n    }\n\n    /**\n     * \n     * Completely reset the state of the menu\n     * \n     * @returns void\n     * @memberof Navigation\n     */\n    clearAll() {\n        this.clearMenus();\n        this.clearButtons();\n        return;\n    }\n\n    /**\n     *\n     * dispatch events to the correct functions.\n     * types include: click, focusin, keydown, mousedown\n     *\n     * @param {object} evt\n     * @returns void\n     * @memberof Navigation\n     */\n    eventDispatcher(evt) {\n        \n        // mousedown focusin click\n        // keydown focusin keydown click\n\n        switch (evt.type) {\n            case 'focusin':\n                this.focusInHandler(evt);\n                break;\n            case 'keydown':\n                if (evt.keyCode === 13) {\n                    // if the keydown is caused by the return key, it should be a click\n                    this.clickHandler(evt);\n                } else if (evt.keyCode === 27) {\n                    // if the keydown is caused by the escape key, close the menus\n                    this.clearAll();\n                } else {\n                    // throw away all other events.\n                    return;\n                }\n                break;\n            \n            case 'mousedown':\n                this.clickHandler(evt);\n                break;\n            \n            default:\n                return;\n        }\n    }\n\n    /**\n     *\n     * Remove the no-js class and attach event listeners\n     * \n     * @memberof Navigation\n     */\n    setEventListeners() {\n        // if this script is running, remove the 'no-js' class from the elements.\n        const listElements = Array.from(this.menu.getElementsByClassName('no-js'));\n        listElements.forEach(element => {\n            element.classList.remove('no-js');\n        });\n        // define a list of possible event listeners\n        let listeners = ['click', 'focusin', 'keydown', 'mouseover'];\n\n        if (this.click) {\n            listeners.push('mousedown', 'mouseup');\n            \n            const subMenuList = Array.from(this.menu.querySelectorAll('.submenu-list'));\n            \n            subMenuList.forEach(menu => menu.classList.add('click-menu'));\n\n        } else {\n            listeners.push('mouseout');\n        }\n        // attach them to the document.\n        for (let i = 0; i < listeners.length; i++) {\n            document.addEventListener(listeners[i], (evt) => {\n                // dispatch the events to the class methods.\n                this.eventDispatcher(evt);\n            });\n        }\n    }\n\n    /**\n     * \n     * Initialize the menu by\n     * - attaching event listeners\n     * - adding styles to the <head>\n     *\n     * @memberof Navigation\n     */\n    init() {\n        this.menu = document.getElementById(this.menuId);\n        this.setEventListeners();\n        // this.setSubmenuIcon();\n    }\n}\n\n"]}