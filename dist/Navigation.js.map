{"version":3,"sources":["Navigation.js"],"names":["Navigation","_ref","arguments","length","undefined","_ref$menuId","menuId","_ref$click","click","_classCallCheck","this","hasNestedSubmenu","currentItem","evt","type","target","customEvt","createCustomEvt","getAttribute","setAttribute","submenuList","menu","contains","preventDefault","clearAll","localName","parentElement","document","querySelectorAll","slice","call","nextSibling","add","el","_this","toggleSubmenuMenuClass","nextElementSibling","submenuArray","getElementsByTagName","nextMenu","toggleButtonAria","setCurrentItem","parentNode","expandedButtonArray","openMenuArray","forEach","_this2","previousElementSibling","offsetParent","clearCurrent","clearMenus","button","prevButton","isSameNode","classList","menuArray","toggle","querySelector","remove","clearButtons","expandedEl","current","item","focusInHandler","clickHandler","keyCode","itemNode","_this3","element","listeners","push","i","addEventListener","eventDispatcher","getElementById","setEventListeners"],"mappings":"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","file":"Navigation.js","sourcesContent":["class Navigation {\n    constructor({\n        menuId = 'am-main-menu',\n        click = false\n    } = {}) {\n        this.hasNestedSubmenu = false;\n        this.menu = null;\n        this.menuId = menuId;\n        this.click = click;\n        this.currentItem = null;\n    }\n\n    hoverHandler(evt) {\n        const { type, target } = evt;\n        const customEvt = this.createCustomEvt();\n        if (type === 'mouseout' && target.getAttribute('aria-haspopup') === \"true\") {\n            target.setAttribute('aria-expanded', 'false');\n        } else if (type === 'mouseover' && target.getAttribute('aria-haspopup') === \"false\") {\n            target.setAttribute('aria-expanded', 'true');\n        }\n        target.dispatchEvent(customEvt)\n    }\n    /**\n     *\n     * Handle incoming clicks\n     *\n     * @param {object} evt object\n     * @returns void\n     * @memberof Navigation\n     */\n    clickHandler(evt) {\n        let target = evt.target;\n        let submenuList = null;\n\n        // if the click is inside the menu on a button, prevent the target from gaining focus and continue.\n        // otherwise do nothing.\n\n        if (!this.menu.contains(target) && (evt.type === 'mousedown' || evt.type === 'keydown')) {\n            this.clearAll();\n        } else if (this.menu.contains(target) && evt.type !== 'keydown') {\n            evt.preventDefault();\n        } \n\n        // people might click on the icon instead of the button.\n        // if so, set the target to the parent (button)\n        if (target.localName === 'span') {\n            target = target.parentElement;\n        }\n        \n        // if there's an open submenu with sub-submenus...\n        if (document.querySelectorAll('.am-submenu-list-open').length > 0 && !document.querySelectorAll('.am-submenu-list-open')[0].contains(target)) {\n\n            const submenuArray = [].slice.call(document.querySelectorAll('.am-submenu-list-open'));\n\n            if (target.nextSibling && target.nextSibling.localName === 'ul') {\n                // if you click from one menu item to another, open the next menu and close the previous one immediately.\n                const nextMenu = target.nextSibling;\n                nextMenu.classList.add('am-submenu-list-open');    \n            }\n            \n            submenuArray.forEach((el) => {\n                // toggle all the menus in the NodeList\n                this.toggleSubmenuMenuClass(el);\n            })\n            \n            this.toggleButtonAria(target);\n    \n        } else {\n            const nextSibling = target.nextElementSibling;\n            \n            // we're near a submenu by clicking on a button but the menu isn't initially open.\n            if (nextSibling !== null && nextSibling.localName === 'ul') {\n                submenuList = nextSibling;\n\n                // check if there's a nested submenu\n                submenuList.getElementsByTagName('ul').length ?\n                    this.hasNestedSubmenu = true :\n                    this.hasNestedSubmenu = false;\n        \n                this.toggleSubmenuMenuClass(submenuList);\n                this.toggleButtonAria(target);\n            }\n        }\n\n        // set a class on the top level parent of the current selection\n        const currentItem = this.getCurrentItem()\n\n        if (currentItem && currentItem !== 'undefined') {\n            this.setCurrentItem(currentItem)\n        }\n\n    }\n\n    /**\n     * \n     * Handle automatically closing the sub-menus.\n     * When a person opens a sub-menu and then leaves by tabbing, close the sub-menu.\n     * \n     * @param {object} evt\n     * @return - void\n     * @memberof Navigation\n     */\n    focusInHandler(evt) {\n        \n        const { target, target: { offsetParent: { parentNode } } } = evt;\n\n        let expandedButtonArray = [].slice.call(this.menu.querySelectorAll('[aria-expanded=\"true\"]'));\n        let openMenuArray = [].slice.call(this.menu.querySelectorAll('.am-submenu-list-open'));\n\n        if (!this.menu.contains(target) && expandedButtonArray.length) {\n            // if we leave the menu, clear everything\n            this.clearAll();\n        } else if (this.menu.contains(target) && openMenuArray.length > 1) {\n            // if focus is still in the menu and there's a sub-sub-menu, \n            // handle openning and closing when focus leaves.\n            openMenuArray.forEach(menu => {\n                if (!menu.contains(target)) {\n                    this.toggleSubmenuMenuClass(menu);\n                    this.toggleButtonAria(menu.previousElementSibling);\n                }\n            })\n        } else {\n            // still in the menu, but moving from one <li> to another\n            // toggle just the button and submenu for the elements that received focusout.\n            expandedButtonArray = [].slice.call(parentNode.querySelectorAll('[aria-expanded=\"true\"]'));\n            openMenuArray = [].slice.call(parentNode.querySelectorAll('.am-submenu-list-open'));\n            \n            // check to make sure that the user hasn't moved to a different menu.\n            if (parentNode.id === this.menuId) {\n                this.toggleButtonAria(expandedButtonArray[0]);\n                this.toggleSubmenuMenuClass(openMenuArray[0]);\n                this.clearCurrent();\n            }\n        }\n        return;\n    }\n\n    /**\n     * \n     * Toggle the class of the submenu element or reset the classes for all menus\n     *\n     * @param {object} el - a submenu (<ul>) element.\n     * @memberof Navigation\n     */\n    toggleSubmenuMenuClass(el) {\n        if (el !== null && el !== undefined) {\n            el.classList.toggle('am-submenu-list-open');\n        } else {\n            this.clearMenus();\n        }\n    }\n\n    /**\n     * \n     * Toggle the state of each button to reflect the aria-expanded state\n     *\n     * @param {*} target - the DOM element returned by evt.target\n     * @returns void\n     * @memberof Navigation\n     */\n    toggleButtonAria(target) {\n        const buttonNode = [].slice.call(document.querySelectorAll('.am-submenu-toggle'));\n        \n        buttonNode.forEach(button => {\n            // for each button, determine if there is a button \"above\" it\n            const prevButton = button.parentElement.parentElement.previousElementSibling;\n\n            // case - clicking on a sub-submenu button which is currently NOT expanded.\n            if (button.isSameNode(target) && button.getAttribute('aria-expanded') === 'false' && prevButton) {\n                // toggle the states of the previous button and the button/target\n                prevButton.setAttribute('aria-expanded', 'true');\n                button.setAttribute('aria-expanded', 'true');\n            }\n            // case - clicking on a sub-submenu button which is currently expanded.\n            else if (button.isSameNode(target) && button.getAttribute('aria-expanded') === 'true' && prevButton) {\n                // keep the previous button expanded and toggle the button/target\n                prevButton.setAttribute('aria-expanded', 'true');\n                button.setAttribute('aria-expanded', 'false');\n            } \n            // case - clicking on a top level button which is currently NOT expanded\n            else if (button.isSameNode(target) && button.getAttribute('aria-expanded') === 'false') {\n                // expand the button\n                button.setAttribute('aria-expanded', 'true');\n            } \n            // case - all other buttons\n            else {\n                // reset the state to false\n                button.setAttribute('aria-expanded', 'false')\n            }\n        });\n        return;\n    }\n\n    /**\n     * Close all submenus\n     * \n     * @returns void\n     * @memberof Navigation\n     */\n    clearMenus() {\n        const menuArray = [].slice.call(this.menu.querySelectorAll('.am-submenu-list-open'));\n        if (menuArray.length > 0) {\n            menuArray.forEach(menu => {\n                menu.classList.toggle('am-submenu-list-open');\n            })\n        }\n        return;\n    }\n\n    /**\n     * Toggle all visual icons and set aria-expanded to false.\n     *\n     * @returns void\n     * @memberof Navigation\n     */\n    clearButtons() {\n        const buttonArray = [].slice.call(this.menu.querySelectorAll('.am-submenu-toggle'))\n        buttonArray.forEach((button) => {\n            button.setAttribute('aria-expanded', 'false');\n        })\n        return;\n    }\n\n    /**\n     * Remove the current item from the menu\n     * \n     * @returns void\n     * @memberof Navigation\n     */\n    clearCurrent() {\n        const currentItem = this.menu.querySelector('.am-current-item');\n        if (currentItem) {\n            currentItem.classList.remove('am-current-item');\n        }\n        return;\n    }\n\n    /**\n     * \n     * Completely reset the state of the menu\n     * \n     * @returns void\n     * @memberof Navigation\n     */\n    clearAll() {\n        this.clearMenus();\n        this.clearButtons();\n        this.clearCurrent();\n        return;\n    }\n\n    /**\n     * \n     * Get the button element which is expanded\n     * Helps with identifying the top level list item\n     * \n     * @return DOM element\n     */\n    getCurrentItem() {\n        const expandedEl = this.menu.querySelector('[aria-expanded=\"true\"]')\n        if (expandedEl) {\n            return expandedEl.parentElement;\n        }        \n    }\n\n    /**\n     * \n     * Add a class to the current top level list item\n     * \n     * @param obj the event object\n     * @return void  \n     */\n    setCurrentItem(current) {\n        const itemNode = [].slice.call(this.menu.querySelectorAll('li'));\n        itemNode.forEach(item => {\n            item.classList.remove('am-current-item');\n        })\n\n        \n        if (current) {\n            this.currentItem = current;\n            this.currentItem.classList.add('am-current-item');\n        }\n    }\n\n    /**\n     *\n     * dispatch events to the correct functions.\n     * types include: click, focusin, keydown, mousedown\n     *\n     * @param {object} evt\n     * @returns void\n     * @memberof Navigation\n     */\n    eventDispatcher(evt) {\n        \n        // mousedown focusin click\n        // keydown focusin keydown click\n        switch (evt.type) {\n            case 'focusin':\n                this.focusInHandler(evt);\n                break;\n            case 'keydown':\n                if (evt.keyCode === 13) {\n                    // if the keydown is caused by the return key, it should be a click\n                    this.clickHandler(evt);\n                } else if (evt.keyCode === 27) {\n                    // if the keydown is caused by the escape key, close the menus\n                    this.clearAll();\n                } else {\n                    // throw away all other events.\n                    return;\n                }\n                break;\n            \n            case 'mousedown':\n                this.clickHandler(evt);\n                break;\n            \n            default:\n                return;\n        }\n    }\n\n    /**\n     *\n     * Remove the no-js class and attach event listeners\n     * \n     * @memberof Navigation\n     */\n    setEventListeners() {\n        // if this script is running, remove the 'no-js' class from the elements.\n        const listElements = [].slice.call(this.menu.querySelectorAll('.no-js'));\n        listElements.forEach(element => {\n            element.classList.remove('no-js');\n        });\n        // define a list of possible event listeners\n        let listeners = ['focusin', 'keydown', 'mouseover'];\n\n        if (this.click) {\n            listeners.push('mousedown');\n            \n            const subMenuList = [].slice.call(this.menu.querySelectorAll('.am-submenu-list'));\n            \n            subMenuList.forEach(menu => menu.classList.add('am-click-menu'));\n\n        } else {\n            listeners.push('mouseout');\n        }\n        // attach them to the document.\n        for (let i = 0; i < listeners.length; i++) {\n            document.addEventListener(listeners[i], (evt) => {\n                // dispatch the events to the class methods.\n                this.eventDispatcher(evt);\n            });\n        }\n    }\n\n    /**\n     * \n     * Initialize the menu by\n     * - assigning the menu\n     * - attaching event listeners\n     *\n     * @memberof Navigation\n     */\n    init() {\n        this.menu = document.getElementById(this.menuId);\n        this.setEventListeners();\n    }\n}\n\n"]}