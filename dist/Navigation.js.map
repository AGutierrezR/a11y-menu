{"version":3,"sources":["Navigation.js"],"names":["Navigation","_ref","arguments","length","undefined","_ref$menuId","menuId","_ref$fontFamily","fontFamily","_ref$chevronDown","chevronDown","_ref$chevronUp","chevronUp","_ref$click","_classCallCheck","this","menu","click","evt","type","target","getAttribute","setAttribute","_this","submenuList","contains","localName","parentElement","document","querySelectorAll","submenuNodeList","nextSibling","classList","add","forEach","el","clearAll","toggleButtonAria","getElementsByTagName","hasNestedSubmenu","toggleSubmenuMenuClass","expandedButtonNode","openElementCollection","parentNode","getElementsByClassName","id","toggle","clearMenus","button","menuNode","prevButton","previousElementSibling","isSameNode","buttonNode","clearButtons","keyCode","clickHandler","_this2","Array","prototype","slice","call","element","remove","listeners","push","i","addEventListener","eventDispatcher","_this3","fontFamilies","includes","icons","hoverCss","listElements","style","styleSheet","cssText","appendChild","icon","getElementById","setEventListeners","setSubmenuIcon"],"mappings":"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","file":"Navigation.js","sourcesContent":["class Navigation {\n    constructor({\n        menuId = 'main-menu',\n        fontFamily = 'Font Awesome 5 Free',\n        chevronDown = '\\\\f078',\n        chevronUp = '\\\\f077',\n        click = false\n    } = {}) {\n        this.chevronDown = chevronDown;\n        this.chevronUp = chevronUp;\n        this.fontFamilies = ['FontAwesome', 'Font Awesome 5 Free', 'Glyphicons Halflings'];\n        this.fontFamily = fontFamily;\n        this.hasNestedSubmenu = false;\n        this.menu = null;\n        this.menuId = menuId;\n        this.click = click;\n    }\n\n    hoverHandler(evt) {\n        const { type, target } = evt;\n        if (type === 'mouseout' && target.getAttribute('aria-haspopup') === \"true\") {\n            target.setAttribute('aria-expanded', 'false');\n        } else if (type === 'mouseover' && target.getAttribute('aria-haspopup') === \"false\") {\n            target.setAttribute('aria-expanded', 'true');\n        }\n    }\n    /**\n     *\n     * Handle incoming clicks\n     *\n     * @param {object} evt object\n     * @returns void\n     * @memberof Navigation\n     */\n    clickHandler(evt) {\n        let target = evt.target;\n        let submenuList = null;\n\n        // if the click is inside the menu on a button, prevent the target from gaining focus and continue.\n        // otherwise do nothing.\n        if (this.menu.contains(target) && target.localName !== 'a') {\n            evt.preventDefault();\n        } else {\n            // the click is on a link or outside the menu so it should be cleared.\n            this.clearAll();\n            return;\n        }\n\n        // people might click on the icon instead of the button.\n        // if so, set the target to the parent (button)\n        if (target.localName === 'span') {\n            target = target.parentElement;\n        }\n        \n        // if there's an open submenu with sub-submenus...\n        if (document.querySelectorAll('.submenu-list-open').length > 0 && !document.querySelectorAll('.submenu-list-open')[0].contains(target)) {\n            \n            const submenuNodeList = document.querySelectorAll('.submenu-list-open');\n\n            if (target.nextSibling && target.nextSibling.localName === 'ul') {\n                // if you click from one menu item to another, open the next menu and close the previous one immediately.\n                const nextMenu = target.nextSibling;\n                nextMenu.classList.add('submenu-list-open');    \n            }\n            \n            submenuNodeList.forEach((el) => {\n                // toggle all the menus in the NodeList\n                this.toggleSubmenuMenuClass(el);\n            })\n            \n            \n            this.toggleButtonAria(target);\n    \n        } else {\n            // we're near a submenu by clicking on a button but the menu isn't initially open.\n            if (target.nextSibling !== null) {\n                submenuList = target.nextSibling;\n\n                // check if there's a nested submenu\n                submenuList.getElementsByTagName('ul').length ?\n                    this.hasNestedSubmenu = true :\n                    this.hasNestedSubmenu = false;\n        \n                this.toggleSubmenuMenuClass(submenuList);\n                this.toggleButtonAria(target);\n            } \n        }\n    }\n\n    /**\n     * \n     * Handle automatically closing the sub-menus.\n     * When a person opens a sub-menu and then leaves by tabbing, close the sub-menu.\n     * \n     * @param {object} evt\n     * @return - void\n     * @memberof Navigation\n     */\n    focusInHandler(evt) {\n        \n        const { target, target: { offsetParent: { parentNode } } } = evt;\n\n        let expandedButtonNode = this.menu.querySelectorAll('[aria-expanded=\"true\"]');\n        let openElementCollection = this.menu.getElementsByClassName('submenu-list-open');\n\n        // if we leave the menu, clear everything\n        if (!this.menu.contains(target) && expandedButtonNode.length) {\n            this.clearAll();\n        } else {\n            // still in the menu, but moving from one <li> to another\n            // toggle just the button and submenu for the elements that received focusout.\n            expandedButtonNode = parentNode.querySelectorAll('[aria-expanded=\"true\"]');\n            openElementCollection = parentNode.getElementsByClassName('submenu-list-open');\n            \n            // check to make sure that the user hasn't moved to a different menu.\n            if (parentNode.id === this.menuId) {\n                this.toggleButtonAria(expandedButtonNode[0]);\n                this.toggleSubmenuMenuClass(openElementCollection[0]);\n            }\n        }\n        return;\n    }\n\n    /**\n     * \n     * Toggle the class of the submenu element or reset the classes for all menus\n     *\n     * @param {object} el - a submenu (<ul>) element.\n     * @memberof Navigation\n     */\n    toggleSubmenuMenuClass(el) {\n        if (el !== null && el !== undefined) {\n            el.classList.toggle('submenu-list-open');\n        } else {\n            this.clearMenus();\n        }\n    }\n\n    /**\n     * Close all submenus\n     * \n     * @returns void\n     * @memberof Navigation\n     */\n    clearMenus() {\n        const menuNode = document.querySelectorAll('.submenu-list-open');\n        menuNode.forEach(menu => {\n            menu.classList.toggle('submenu-list-open');\n        })\n        return;\n    }\n\n    /**\n     * Toggle all visual icons and set aria-expanded to false.\n     *\n     * @returns void\n     * @memberof Navigation\n     */\n    clearButtons() {\n        const buttonNode = document.querySelectorAll('.submenu-toggle');\n        buttonNode.forEach((button) => {\n            button.setAttribute('aria-expanded', 'false');\n        })\n        return;\n    }\n\n    /**\n     * \n     * Toggle the state of each button to reflect the aria-expanded state\n     *\n     * @param {*} target - the DOM element returned by evt.target\n     * @returns void\n     * @memberof Navigation\n     */\n    toggleButtonAria(target) {\n        const buttonNode = document.querySelectorAll('.submenu-toggle');\n        \n        buttonNode.forEach(button => {\n            // for each button, determine if there is a button \"above\" it\n            const prevButton = button.parentElement.parentElement.previousElementSibling;\n            \n            // case - clicking on a sub-submenu button which is currently NOT expanded.\n            if (button.isSameNode(target) && button.getAttribute('aria-expanded') === 'false' && prevButton) {\n                // toggle the states of the previous button and the button/target\n                prevButton.setAttribute('aria-expanded', 'true');\n                button.setAttribute('aria-expanded', 'true');\n            }\n            // case - clicking on a sub-submenu button which is currently expanded.\n            else if (button.isSameNode(target) && button.getAttribute('aria-expanded') === 'true' && prevButton) {\n                // keep the previous button expanded and toggle the button/target\n                prevButton.setAttribute('aria-expanded', 'true');\n                button.setAttribute('aria-expanded', 'false');\n            } \n            // case - clicking on a top level button which is currently NOT expanded\n            else if (button.isSameNode(target) && button.getAttribute('aria-expanded') === 'false') {\n                // expand the button\n                button.setAttribute('aria-expanded', 'true');\n            } \n            // case - all other buttons\n            else {\n                // reset the state to false\n                button.setAttribute('aria-expanded', 'false')\n            }\n        });\n        return;\n    }\n\n    /**\n     * \n     * Completely reset the state of the menu\n     * \n     * @returns void\n     * @memberof Navigation\n     */\n    clearAll() {\n        this.clearMenus();\n        this.clearButtons();\n        return;\n    }\n\n    /**\n     *\n     * dispatch events to the correct functions.\n     * types include: click, focusin, keydown, mousedown\n     *\n     * @param {object} evt\n     * @returns void\n     * @memberof Navigation\n     */\n    eventDispatcher(evt) {\n        \n        // mousedown focusin click\n        // keydown focusin keydown click\n\n        switch (evt.type) {\n            case 'focusin':\n                this.focusInHandler(evt);\n                break;\n            case 'keydown':\n                if (evt.keyCode === 13) {\n                    // if the keydown is caused by the return key, it should be a click\n                    this.clickHandler(evt);\n                } else if (evt.keyCode === 27) {\n                    // if the keydown is caused by the escape key, close the menus\n                    this.clearAll();\n                } else {\n                    // throw away all other events.\n                    return;\n                }\n                break;\n            \n            case 'mousedown':\n                this.clickHandler(evt);\n                break;\n            \n            default:\n                return;\n        }\n    }\n\n    /**\n     *\n     * Remove the no-js class and attach event listeners\n     * \n     * @memberof Navigation\n     */\n    setEventListeners() {\n        // if this script is running, remove the 'no-js' class from the elements.\n        const listElements = Array.prototype.slice.call(this.menu.getElementsByClassName('no-js'));\n        listElements.forEach(element => {\n            element.classList.remove('no-js');\n        });\n        // define a list of possible event listeners\n        let listeners = ['click', 'focusin', 'keydown', 'mouseover'];\n\n        if (this.click) {\n            listeners.push('mousedown', 'mouseup');\n            \n            const subMenuList = this.menu.querySelectorAll('.submenu-list');\n            \n            subMenuList.forEach(menu => menu.classList.add('click-menu'));\n\n        } else {\n            listeners.push('mouseout');\n        }\n        // attach them to the document.\n        for (let i = 0; i < listeners.length; i++) {\n            document.addEventListener(listeners[i], (evt) => {\n                // dispatch the events to the class methods.\n                this.eventDispatcher(evt);\n            });\n        }\n    }\n\n    /**\n     *\n     * Inline styles to the <head> for the visual indicators\n     * \n     * @returns void\n     * @memberof Navigation\n     */\n    setSubmenuIcon() {\n        // possible font-family for the icons\n        let fontFamily = this.fontFamily;\n\n        if (!this.fontFamilies.includes(fontFamily)) {\n            fontFamily = '';\n        }\n\n        // the list of all the submenu icons\n        const icons = this.menu.querySelectorAll('.submenu-icon');\n        // the css to inject into the page\n        const hoverCss = `\n            nav ul li span::before {\n                content: '${this.chevronDown}';\n                font-family: '${fontFamily}';\n                font-weight: bold;\n            }\n            nav ul.click-menu li > button[aria-expanded=\"true\"] span::before,\n            nav ul:not(.click-menu) li:hover > button span::before,\n            nav ul li:focus > button span::before { \n                content: '${this.chevronUp}';\n                font-family: '${fontFamily}'; \n                font-weight: bold;\n            }`;\n\n        // create a style tag\n        const style = document.createElement('style');\n\n        // add the styles to the tag (or a stylesheet if it exists)\n        if (style.styleSheet) {\n            style.styleSheet.cssText = hoverCss;\n        } else {\n            style.appendChild(document.createTextNode(hoverCss));\n        }\n\n        // add the tag to the <head>\n        document.getElementsByTagName('head')[0].appendChild(style);\n\n        // set the data-before attribute to the values passed in the constructor.\n        icons.forEach((icon) => icon.setAttribute('data-before', this.chevronDown));\n\n        return;\n    }\n\n    /**\n     * \n     * Initialize the menu by\n     * - attaching event listeners\n     * - adding styles to the <head>\n     *\n     * @memberof Navigation\n     */\n    init() {\n        this.menu = document.getElementById(this.menuId);\n        this.setEventListeners();\n        this.setSubmenuIcon();\n    }\n}\n\n"]}