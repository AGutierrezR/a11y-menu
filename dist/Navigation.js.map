{"version":3,"sources":["Navigation.js"],"names":["Navigation","_ref","arguments","length","undefined","_ref$menuId","menuId","_ref$fontFamily","fontFamily","_ref$chevronDown","chevronDown","_ref$chevronUp","chevronUp","_ref$click","_classCallCheck","this","menu","click","evt","toggleMenu","target","preventDefault","fontFamilies","document","querySelectorAll","getElementsByClassName","keyCode","openSubmenu","expandedElementCollection","setAttribute","remove","type","getAttribute","submenuList","localName","parentElement","contains","submenuNodeList","nextSibling","classList","add","forEach","el","toggleButtonAria","hasNestedSubmenu","_this2","nextMenu","console","log","toggle","clearMenus","button","prevButton","previousElementSibling","isSameNode","clearButtons","Array","prototype","slice","call","element","listeners","push","i","addEventListener","_this3","eventDispatcher","_this4","clickHandler","icons","hoverCss","createElement","style","styleSheet","subMenuList","appendChild","createTextNode","getElementsByTagName","icon","getElementById","setEventListeners","setSubmenuIcon"],"mappings":"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","file":"Navigation.js","sourcesContent":["class Navigation {\n    constructor({\n        menuId = 'main-menu',\n        fontFamily = 'Font Awesome 5 Free',\n        chevronDown = '\\\\f078',\n        chevronUp = '\\\\f077',\n        click = false\n    } = {}) {\n        this.chevronDown = chevronDown;\n        this.chevronUp = chevronUp;\n        this.fontFamilies = ['FontAwesome', 'Font Awesome 5 Free', 'Glyphicons Halflings'];\n        this.fontFamily = fontFamily;\n        this.hasNestedSubmenu = false;\n        this.menu = null;\n        this.menuId = menuId;\n        this.click = click;\n    }\n    focusInHandlerOld(evt) {\n        const { target } = evt;\n        this.toggleMenu(target);\n        evt.preventDefault();\n    }\n    keyDownHandlerOld(evt) {\n        const { keyCode } = evt;\n        const expandedElementCollection = document.querySelectorAll('[aria-expanded=\"true\"]')[0];\n        const openSubmenu = document.getElementsByClassName('submenu-list-open')[0];\n\n        if (keyCode === 27 && openSubmenu) {\n            expandedElementCollection.setAttribute('aria-expanded', 'false');\n            openSubmenu.classList.remove('submenu-list-open');\n        }\n    }\n    /**\n     *  When people click on a button, prevent it from gaining focus.\n     *  If the button has focus, it will not allow the submenu to close correctly.\n     *\n     * @param {object} evt\n     * @memberof Navigation\n     */\n    mouseDownHandler(evt) {\n        evt.preventDefault();\n    }\n    hoverHandler(evt) {\n        const { type, target } = evt;\n        if (type === 'mouseout' && target.getAttribute('aria-haspopup') === \"true\") {\n            target.setAttribute('aria-expanded', 'false');\n        } else if (type === 'mouseover' && target.getAttribute('aria-haspopup') === \"false\") {\n            target.setAttribute('aria-expanded', 'true');\n        }\n    }\n    clickHandler(evt) {\n        let { target } = evt;\n        let submenuList = null;\n\n        // people might click on the icon instead of the button.\n        // if so, set the target to the parent (button)\n        if (target.localName === 'span') {\n            target = target.parentElement;\n        }\n        \n        // if there's an open submenu with sub-submenus...\n        if (document.querySelectorAll('.submenu-list-open').length > 0 && !document.querySelectorAll('.submenu-list-open')[0].contains(target)) {\n            \n            const submenuNodeList = document.querySelectorAll('.submenu-list-open');\n\n            if (target.nextSibling && target.nextSibling.localName === 'ul') {\n                // if you click from one menu item to another, open the next menu and close the previous one immediately.\n                const nextMenu = target.nextSibling;\n                nextMenu.classList.add('submenu-list-open');    \n            }\n            \n            submenuNodeList.forEach((el) => {\n                // toggle all the menus in the NodeList\n                this.toggleSubmenuMenuClass(el);\n            })\n            \n            \n            this.toggleButtonAria(target);\n    \n        } else {\n            // we're near a submenu by clicking on a button but the menu isn't initially open.\n            if (target.nextSibling !== null) {\n                submenuList = target.nextSibling;\n\n                // check if there's a nested submenu\n                submenuList.getElementsByTagName('ul').length ?\n                    this.hasNestedSubmenu = true :\n                    this.hasNestedSubmenu = false;\n        \n                this.toggleSubmenuMenuClass(submenuList);\n                this.toggleButtonAria(target);\n            } \n        }\n    }\n\n    escapeHandler(evt) {\n        const { keyCode } = evt;\n        const submenuNodeList = document.querySelectorAll('.submenu-list-open');\n        // const buttonNodeList = document.querySelectorAll('[aria-expanded=\"true\"]')\n        submenuNodeList.forEach((el) => {\n            // toggle all the menus in the NodeList\n            this.toggleSubmenuMenuClass(el);\n        })\n        // buttonNodeList.forEach((el) => {\n        //     this.toggleButtonAria(el);\n        // })\n    }\n\n    focusInHandler(evt) {\n        console.log(evt.target, 'focus!')\n    }\n\n    toggleSubmenuMenuClass(el) {\n        if (el !== null) {\n            el.classList.toggle('submenu-list-open');\n            console.log(el)\n        } else {\n            this.clearMenus();\n        }\n    }\n\n    clearMenus() {\n        const menuNode = document.querySelectorAll('.submenu-list-open');\n        menuNode.forEach(menu => {\n            menu.classList.toggle('submenu-list-open');\n        })\n    }\n\n    toggleButtonAria(target) {\n        const buttonNode = document.querySelectorAll('.submenu-toggle');\n        \n        buttonNode.forEach(button => {\n            // for each button, determine if there is a button \"above\" it\n            const prevButton = button.parentElement.parentElement.previousElementSibling;\n            \n            // case - clicking on a sub-submenu button which is currently NOT expanded.\n            if (button.isSameNode(target) && button.getAttribute('aria-expanded') === 'false' && prevButton) {\n                // toggle the states of the previous button and the button/target\n                prevButton.setAttribute('aria-expanded', 'true');\n                button.setAttribute('aria-expanded', 'true');\n            }\n            // case - clicking on a sub-submenu button which is currently expanded.\n            else if (button.isSameNode(target) && button.getAttribute('aria-expanded') === 'true' && prevButton) {\n                // keep the previous button expanded and toggle the button/target\n                prevButton.setAttribute('aria-expanded', 'true');\n                button.setAttribute('aria-expanded', 'false');\n            } \n            // case - clicking on a top level button which is currently NOT expanded\n            else if (button.isSameNode(target) && button.getAttribute('aria-expanded') === 'false') {\n                // expand the button\n                button.setAttribute('aria-expanded', 'true');\n            } \n            // case - all other buttons\n            else {\n                // reset the state to false\n                button.setAttribute('aria-expanded', 'false')\n            }\n        });\n    }\n\n    clearAll() {\n        this.clearMenus();\n        this.clearButtons();\n    }\n\n    eventDispatcher(evt) {\n        // dispatch event listeners to the correct functions.\n\n        // mousedown focusin click\n        // keydown focusin keydown click\n\n        switch (evt.type) {\n            case 'keydown':\n                if (evt.keyCode === 9) {\n                    // if the keydown is caused by the tab key, it should be a focusIn\n                    this.focusInHandler(evt);\n                } else if (evt.keyCode === 13) {\n                    // if the keydown is caused by the return key, it should be a click\n                    // evt.preventDefault();\n                    this.clickHandler(evt);\n                } else if (evt.keyCode === 27) {\n                    // if the keydown is caused by the escape key, close the menus\n                    this.escapeHandler(evt);\n                } else {\n                    // throw away all other events.\n                    return;\n                }\n                break;\n            \n            case 'mousedown':\n                // if the event was caused by the mouse, don't let the target gain focus.\n                evt.preventDefault();\n                this.clickHandler(evt);\n                break;\n            \n            default:\n                return;\n        }\n    }\n    setEventListeners() {\n        // if this script is running, remove the 'no-js' class from the elements.\n        const listElements = Array.prototype.slice.call(this.menu.getElementsByClassName('no-js'));\n        listElements.forEach(element => {\n            element.classList.remove('no-js');\n        });\n        // define a list of possible event listeners\n        let listeners = ['click', 'focusin', 'keydown', 'mouseover'];\n\n        if (this.click) {\n            listeners.push('mousedown', 'mouseup');\n            \n            const subMenuList = this.menu.querySelectorAll('.submenu-list');\n            \n            subMenuList.forEach(menu => menu.classList.add('click-menu'));\n\n        } else {\n            listeners.push('mouseout');\n        }\n        // attach them to the document.\n        for (let i = 0; i < listeners.length; i++) {\n            document.addEventListener(listeners[i], (evt) => {\n                // dispatch the events to the class methods.\n                this.eventDispatcher(evt);\n            });\n        }\n    }\n    setSubmenuIcon() {\n        // possible font-family for the icons\n        let fontFamily = this.fontFamily;\n\n        if (!this.fontFamilies.includes(fontFamily)) {\n            fontFamily = '';\n        }\n\n        // the list of all the submenu icons\n        const icons = this.menu.querySelectorAll('.submenu-icon');\n        // the css to inject into the page\n        const hoverCss = `\n            nav ul li span::before {\n                content: '${this.chevronDown}';\n                font-family: '${fontFamily}';\n                font-weight: bold;\n            }\n            nav ul.click-menu li > button[aria-expanded=\"true\"] span::before,\n            nav ul:not(.click-menu) li:hover > button span::before,\n            nav ul li:focus > button span::before { \n                content: '${this.chevronUp}';\n                font-family: '${fontFamily}'; \n                font-weight: bold;\n            }`;\n\n        // create a style tag\n        const style = document.createElement('style');\n\n        // add the styles to the tag (or a stylesheet if it exists)\n        if (style.styleSheet) {\n            style.styleSheet.cssText = hoverCss;\n        } else {\n            style.appendChild(document.createTextNode(hoverCss));\n        }\n\n        // add the tag to the <head>\n        document.getElementsByTagName('head')[0].appendChild(style);\n\n        // set the data-before attribute to the values passed in the constructor.\n        icons.forEach((icon) => icon.setAttribute('data-before', this.chevronDown));\n\n        return;\n    }\n    init() {\n        this.menu = document.getElementById(this.menuId);\n        this.setEventListeners();\n        this.setSubmenuIcon();\n    }\n}\n\n"]}