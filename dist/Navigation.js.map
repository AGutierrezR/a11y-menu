{"version":3,"sources":["Navigation.js"],"names":["Navigation","_ref","arguments","length","undefined","_ref$menuId","menuId","_ref$click","click","_classCallCheck","this","hasNestedSubmenu","evt","target","type","getAttribute","setAttribute","_this","console","submenuList","menu","contains","preventDefault","clearAll","localName","parentElement","document","querySelectorAll","submenuArray","Array","from","nextSibling","classList","add","forEach","el","toggleButtonAria","nextElementSibling","getElementsByTagName","toggleSubmenuMenuClass","_this2","parentNode","offsetParent","expandedButtonArray","openMenuArray","previousElementSibling","id","clearMenus","button","prevButton","isSameNode","buttonNode","menuArray","buttonArray","focusInHandler","keyCode","clickHandler","clearButtons","_this3","element","remove","listeners","push","i","addEventListener","eventDispatcher","getElementById","setEventListeners"],"mappings":"iYAAMA,sBACF,SAAAA,IAGQ,IAAAC,EAAAC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAJ,GAAIG,EAAAJ,EAFJK,OAAAA,OAEIF,IAAAC,EAFK,eAELA,EAAAE,EAAAN,EADJO,MAAAA,OACIJ,IAAAG,GAAAA,EAAAE,gBAAAC,KAAAV,GACJU,KAAKC,kBAAmB,EAL1BX,KAAAA,KAMc,KALhBU,KAAAJ,OAAAA,EAGQI,KAAAF,MAAAA,4DAAAI,GAAA,IADJJ,EACII,EADJJ,KACIK,EAAAD,EAAAC,OASS,aAATC,GAAgE,SAAzCD,EAAOE,aAAa,iBAT3CF,EAAAG,aAAA,gBAAA,SAWgB,cAATF,GAAiE,UAAzCD,EAAOE,aAAa,kBAVvDF,EAAKF,aAAmB,gBAAxB,6CAsBSC,GAAK,IAAAK,EAAAP,KAddQ,QAAIJ,IAAAA,EAAAA,MACAD,IAAAA,EAAAA,EAAOG,OACVG,EAAUL,KA0CX,GAtBKJ,KAAKU,KAAKC,SAASR,IAAyB,cAAbD,EAAIE,MAAqC,YAAbF,EAAIE,KAEzDJ,KAAKU,KAAKC,SAASR,IAAwB,YAAbD,EAAIE,MACzCF,EAAIU,iBAFJZ,KAAKa,WAgBT,SAAAV,EAAAW,YACAX,EAAAA,EAAAY,eAIAC,SAAAC,iBAAA,yBAAAxB,OAAA,IAAAuB,SAAAC,iBAAA,yBAAA,GAAAN,SAAAR,GAAA,CAEA,IAAAe,EAAAC,MAAAC,KAAAJ,SAAAC,iBAAA,0BAEA,GAAAd,EAAAkB,aAAA,OAAAlB,EAAAkB,YAAAP,UAEAX,EAAAkB,YACAC,UAAAC,IAAA,wBAKAL,EAAAM,QAAA,SAAAC,GAEItB,EAAAA,uBAAJsB,KAoBIzB,KAAK0B,iBAAiBvB,OAf1B,CAkBI,IAAMkB,EAAclB,EAAOwB,mBAdhBN,OAAXA,GAA6CP,OAAzCO,EAA6BA,aAC7BZ,EAAAY,GAGHO,qBAAA,MAAAnC,OAkBOO,KAAKC,kBAAmB,EAhBhCiB,KAAAA,kBAAqB,EAEjBlB,KAAA6B,uBAAKA,GACR7B,KAHD0B,iBAAAvB,4CAoBID,GAAA,IAAA4B,EAAA9B,KAEPG,EAAAD,EAAAC,OAAA4B,EAAA7B,EAAAC,OAAA6B,aAAAD,WAgBGE,EAAsBd,MAAMC,KAAKpB,KAAKU,KAAKO,iBAAiB,2BAbpEiB,EAAAf,MAAAC,KAAApB,KAAAU,KAAAO,iBAAA,2BAgBSjB,KAAKU,KAAKC,SAASR,IAAW8B,EAAoBxC,OAEnDO,KAAKa,WACEb,KAAKU,KAAKC,SAASR,IAAW+B,EAAczC,OAAS,EAG5DyC,EAAcV,QAAQ,SAAAd,GACbA,EAAKC,SAASR,KACf2B,EAAKD,uBAAuBnB,GAC5BoB,EAAKJ,iBAAiBhB,EAAKyB,4BAMnCF,EAAsBd,MAAMC,KAAKW,EAAWd,iBAAiB,2BAC7DiB,EAAgBf,MAAMC,KAAKW,EAAWd,iBAAiB,0BAGnDc,EAAWK,KAAOpC,KAAKJ,SAnB3BI,KAAC0B,iBAAmBvB,EAAW8B,IAC/BjC,KAAA6B,uBAAAK,EAAA,qDAaAT,GACAQ,MAAAA,EACAC,EAAAA,UAAAA,OAAgBf,wBAEhBnB,KAAAqC,sDAgCSlC,GACMgB,MAAMC,KAAKJ,SAASC,iBAAiB,uBAE7CO,QAAQ,SAAAc,GAEf,IAAMC,EAAaD,EAAOvB,cAAcA,cAAcoB,uBApBtDV,EAAOe,WAAQf,IAAkB,UAAX/B,EAAWW,aAAA,kBAAAkC,GAArCA,EAEOjC,aAAA,gBAAA,QACHgC,EAAKD,aAAL,gBAAA,SA0BSC,EAAOE,WAAWrC,IAAoD,SAAzCmC,EAAOjC,aAAa,kBAA+BkC,GAErFA,EAAWjC,aAAa,gBAAiB,QACzCgC,EAAOhC,aAAa,gBAAiB,UAGhCgC,EAAOE,WAAWrC,IAAoD,UAAzCmC,EAAOjC,aAAa,iBAEtDiC,EAAOhC,aAAa,gBAAiB,QArBvCmC,EAAAA,aAAmBrB,gBAAcH,gDAa1BqB,MAAOE,KAAAA,KAAP9B,KAAkBP,iBAAkBE,0BACzCmB,QAAA,SAAAd,GACA6B,EAAAA,UAAAA,OAAAA,iEAYHpB,MAAAC,KAAApB,KAAAU,KAAAO,iBAAA,uBAzBLO,QAAA,SAAAc,GA2BAA,EAAAhC,aAAA,gBAAA,8CAUAN,KAAAqC,aACAK,KAAAA,uDA0CYxC,GA5BZyC,OAAAA,EAAAA,MACIL,IAAAA,UADJtC,KAAA4C,eAAA1C,GAGA,MACH,IAAA,UAiCW,GAAoB,KAAhBA,EAAI2C,QAEJ7C,KAAK8C,aAAa5C,OACf,CAAA,GAAoB,KAAhBA,EAAI2C,QAKX,OAHA7C,KAAKa,WAKT,MAjCR,IAAKwB,YACLrC,KAAK+C,aAAL7C,GACA,MAqCI,QAlCR,oDA6CoB,IAAA8C,EAAAhD,KAEKmB,MAAMC,KAtCflB,KAAKQ,KAAAO,iBAAA,WAuCJO,QAAQ,SAAAyB,GArCrBA,EAAA3B,UAAA4B,OAAA,WAGI,IAAAC,EAAK,CAAA,UAAL,UAAA,aAEInD,KAAAF,OACJqD,EAAKC,KAAA,aAEGjC,MAAAC,KAAApB,KAAAU,KAAAO,iBAAA,qBADJO,QAGWtB,SAAAA,GAAAA,OAAI2C,EAAJvB,UAAoBC,IAAA,oBAG9B4B,EAHMC,KAGA,YAGN,IAAA,IAAAC,EAAA,EAAAA,EAAAF,EAAA1D,OAAA4D,IACDrC,SAAAsC,iBAAAH,EAAAE,GAAA,SAAAnD,GAEJ8C,EAAKO,gBAALrD,oCAoDJF,KAAKU,KAAOM,SAASwC,eAAexD,KAAKJ,QACzCI,KAAKyD","file":"Navigation.js","sourcesContent":["class Navigation {\n    constructor({\n        menuId = 'am-main-menu',\n        click = false\n    } = {}) {\n        this.hasNestedSubmenu = false;\n        this.menu = null;\n        this.menuId = menuId;\n        this.click = click;\n    }\n\n    hoverHandler(evt) {\n        const { type, target } = evt;\n        if (type === 'mouseout' && target.getAttribute('aria-haspopup') === \"true\") {\n            target.setAttribute('aria-expanded', 'false');\n        } else if (type === 'mouseover' && target.getAttribute('aria-haspopup') === \"false\") {\n            target.setAttribute('aria-expanded', 'true');\n        }\n    }\n    /**\n     *\n     * Handle incoming clicks\n     *\n     * @param {object} evt object\n     * @returns void\n     * @memberof Navigation\n     */\n    clickHandler(evt) {\n        console.log(evt.type)\n        let target = evt.target;\n        let submenuList = null;\n\n        // if the click is inside the menu on a button, prevent the target from gaining focus and continue.\n        // otherwise do nothing.\n\n        if (!this.menu.contains(target) && (evt.type === 'mousedown' || evt.type === 'keydown')) {\n            this.clearAll();\n        } else if (this.menu.contains(target) && evt.type !== 'keydown') {\n            evt.preventDefault();\n        } \n        // else if (this.menu.contains(target) && evt.type === 'keydown') {\n        //     // break;\n        // } \n\n\n\n        // if (this.menu.contains(target)) {\n        //     console.log(this.menu.contains(target), target.localName)\n        //     evt.preventDefault();\n        // } else {\n        //     // the click is on a link or outside the menu so it should be cleared.\n        //     console.log('clear?')\n        //     this.clearAll();\n        //     return;\n        // }\n\n        // if (!this.menu.contains(target) && target.localName !== 'a') {\n        //     // the click is on a link or outside the menu so it should be cleared.\n        //     console.log('clear?')\n        //     this.clearAll();\n        //     return;\n        // } \n        // else {\n        //     evt.preventDefault();\n        // }\n\n\n\n\n        // people might click on the icon instead of the button.\n        // if so, set the target to the parent (button)\n        if (target.localName === 'span') {\n            target = target.parentElement;\n        }\n        \n        // if there's an open submenu with sub-submenus...\n        if (document.querySelectorAll('.am-submenu-list-open').length > 0 && !document.querySelectorAll('.am-submenu-list-open')[0].contains(target)) {\n\n            const submenuArray = Array.from(document.querySelectorAll('.am-submenu-list-open'));\n\n            if (target.nextSibling && target.nextSibling.localName === 'ul') {\n                // if you click from one menu item to another, open the next menu and close the previous one immediately.\n                const nextMenu = target.nextSibling;\n                nextMenu.classList.add('am-submenu-list-open');    \n            }\n            \n            submenuArray.forEach((el) => {\n                // toggle all the menus in the NodeList\n                this.toggleSubmenuMenuClass(el);\n            })\n            \n            this.toggleButtonAria(target);\n    \n        } else {\n            const nextSibling = target.nextElementSibling;\n            \n            // we're near a submenu by clicking on a button but the menu isn't initially open.\n            if (nextSibling !== null && nextSibling.localName === 'ul') {\n                submenuList = nextSibling;\n\n                // check if there's a nested submenu\n                submenuList.getElementsByTagName('ul').length ?\n                    this.hasNestedSubmenu = true :\n                    this.hasNestedSubmenu = false;\n        \n                this.toggleSubmenuMenuClass(submenuList);\n                this.toggleButtonAria(target);\n            } \n        }\n    }\n\n    /**\n     * \n     * Handle automatically closing the sub-menus.\n     * When a person opens a sub-menu and then leaves by tabbing, close the sub-menu.\n     * \n     * @param {object} evt\n     * @return - void\n     * @memberof Navigation\n     */\n    focusInHandler(evt) {\n        \n        const { target, target: { offsetParent: { parentNode } } } = evt;\n\n        let expandedButtonArray = Array.from(this.menu.querySelectorAll('[aria-expanded=\"true\"]'));\n        let openMenuArray = Array.from(this.menu.querySelectorAll('.am-submenu-list-open'));\n\n        if (!this.menu.contains(target) && expandedButtonArray.length) {\n            // if we leave the menu, clear everything\n            this.clearAll();\n        } else if (this.menu.contains(target) && openMenuArray.length > 1) {\n            // if focus is still in the menu and there's a sub-sub-menu, \n            // handle openning and closing when focus leaves.\n            openMenuArray.forEach(menu => {\n                if (!menu.contains(target)) {\n                    this.toggleSubmenuMenuClass(menu);\n                    this.toggleButtonAria(menu.previousElementSibling);\n                }\n            })\n        } else {\n            // still in the menu, but moving from one <li> to another\n            // toggle just the button and submenu for the elements that received focusout.\n            expandedButtonArray = Array.from(parentNode.querySelectorAll('[aria-expanded=\"true\"]'));\n            openMenuArray = Array.from(parentNode.querySelectorAll('.am-submenu-list-open'));\n            \n            // check to make sure that the user hasn't moved to a different menu.\n            if (parentNode.id === this.menuId) {\n                this.toggleButtonAria(expandedButtonArray[0]);\n                this.toggleSubmenuMenuClass(openMenuArray[0]);\n            }\n        }\n        return;\n    }\n\n    /**\n     * \n     * Toggle the class of the submenu element or reset the classes for all menus\n     *\n     * @param {object} el - a submenu (<ul>) element.\n     * @memberof Navigation\n     */\n    toggleSubmenuMenuClass(el) {\n        if (el !== null && el !== undefined) {\n            el.classList.toggle('am-submenu-list-open');\n        } else {\n            this.clearMenus();\n        }\n    }\n\n    /**\n     * \n     * Toggle the state of each button to reflect the aria-expanded state\n     *\n     * @param {*} target - the DOM element returned by evt.target\n     * @returns void\n     * @memberof Navigation\n     */\n    toggleButtonAria(target) {\n        const buttonNode = Array.from(document.querySelectorAll('.am-submenu-toggle'));\n        \n        buttonNode.forEach(button => {\n            // for each button, determine if there is a button \"above\" it\n            const prevButton = button.parentElement.parentElement.previousElementSibling;\n\n            // case - clicking on a sub-submenu button which is currently NOT expanded.\n            if (button.isSameNode(target) && button.getAttribute('aria-expanded') === 'false' && prevButton) {\n                // toggle the states of the previous button and the button/target\n                prevButton.setAttribute('aria-expanded', 'true');\n                button.setAttribute('aria-expanded', 'true');\n            }\n            // case - clicking on a sub-submenu button which is currently expanded.\n            else if (button.isSameNode(target) && button.getAttribute('aria-expanded') === 'true' && prevButton) {\n                // keep the previous button expanded and toggle the button/target\n                prevButton.setAttribute('aria-expanded', 'true');\n                button.setAttribute('aria-expanded', 'false');\n            } \n            // case - clicking on a top level button which is currently NOT expanded\n            else if (button.isSameNode(target) && button.getAttribute('aria-expanded') === 'false') {\n                // expand the button\n                button.setAttribute('aria-expanded', 'true');\n            } \n            // case - all other buttons\n            else {\n                // reset the state to false\n                button.setAttribute('aria-expanded', 'false')\n            }\n        });\n        return;\n    }\n\n    /**\n     * Close all submenus\n     * \n     * @returns void\n     * @memberof Navigation\n     */\n    clearMenus() {\n        const menuArray = Array.from(this.menu.querySelectorAll('.am-submenu-list-open'));\n        menuArray.forEach(menu => {\n            menu.classList.toggle('am-submenu-list-open');\n        })\n        return;\n    }\n\n    /**\n     * Toggle all visual icons and set aria-expanded to false.\n     *\n     * @returns void\n     * @memberof Navigation\n     */\n    clearButtons() {\n        const buttonArray = Array.from(this.menu.querySelectorAll('.am-submenu-toggle'))\n        buttonArray.forEach((button) => {\n            button.setAttribute('aria-expanded', 'false');\n        })\n        return;\n    }\n\n    /**\n     * \n     * Completely reset the state of the menu\n     * \n     * @returns void\n     * @memberof Navigation\n     */\n    clearAll() {\n        this.clearMenus();\n        this.clearButtons();\n        return;\n    }\n\n    /**\n     *\n     * dispatch events to the correct functions.\n     * types include: click, focusin, keydown, mousedown\n     *\n     * @param {object} evt\n     * @returns void\n     * @memberof Navigation\n     */\n    eventDispatcher(evt) {\n        \n        // mousedown focusin click\n        // keydown focusin keydown click\n        switch (evt.type) {\n            case 'focusin':\n                this.focusInHandler(evt);\n                break;\n            case 'keydown':\n                if (evt.keyCode === 13) {\n                    // if the keydown is caused by the return key, it should be a click\n                    this.clickHandler(evt);\n                } else if (evt.keyCode === 27) {\n                    // if the keydown is caused by the escape key, close the menus\n                    this.clearAll();\n                } else {\n                    // throw away all other events.\n                    return;\n                }\n                break;\n            \n            case 'mousedown':\n                this.clickHandler(evt);\n                break;\n            \n            default:\n                return;\n        }\n    }\n\n    /**\n     *\n     * Remove the no-js class and attach event listeners\n     * \n     * @memberof Navigation\n     */\n    setEventListeners() {\n        // if this script is running, remove the 'no-js' class from the elements.\n        const listElements = Array.from(this.menu.querySelectorAll('.no-js'));\n        listElements.forEach(element => {\n            element.classList.remove('no-js');\n        });\n        // define a list of possible event listeners\n        let listeners = ['focusin', 'keydown', 'mouseover'];\n\n        if (this.click) {\n            listeners.push('mousedown');\n            \n            const subMenuList = Array.from(this.menu.querySelectorAll('.am-submenu-list'));\n            \n            subMenuList.forEach(menu => menu.classList.add('am-click-menu'));\n\n        } else {\n            listeners.push('mouseout');\n        }\n        // attach them to the document.\n        for (let i = 0; i < listeners.length; i++) {\n            document.addEventListener(listeners[i], (evt) => {\n                // dispatch the events to the class methods.\n                this.eventDispatcher(evt);\n            });\n        }\n    }\n\n    /**\n     * \n     * Initialize the menu by\n     * - assigning the menu\n     * - attaching event listeners\n     *\n     * @memberof Navigation\n     */\n    init() {\n        this.menu = document.getElementById(this.menuId);\n        this.setEventListeners();\n    }\n}\n\n"]}