{"version":3,"sources":["Navigation.js"],"names":["Navigation","_ref","arguments","length","undefined","_ref$menuId","menuId","_ref$fontFamily","fontFamily","_ref$chevronDown","chevronDown","_ref$chevronUp","chevronUp","_ref$click","_classCallCheck","this","menu","click","evt","submenuList","target","localName","parentElement","nextSibling","console","log","document","getElementsByClassName","getElementsByTagName","hasNestedSubmenu","getAttribute","classList","contains","preventDefault","toggle","setAttribute","parentNode","offsetParent","querySelectorAll","expandedElementCollection","openSubmenu","keyCode","type","clickHandler","hoverHandler","prototype","slice","call","forEach","element","remove","listeners","push","i","addEventListener","_this","eventDispatcher","_this2","fontFamilies","includes","icons","hoverCss","listElements","style","styleSheet","cssText","appendChild","createTextNode","icon","getElementById","setEventListeners","setSubmenuIcon"],"mappings":"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","file":"Navigation.js","sourcesContent":["class Navigation {\n    constructor({\n        menuId = 'main-menu',\n        fontFamily = 'Font Awesome 5 Free',\n        chevronDown = '\\\\f078',\n        chevronUp = '\\\\f077',\n        click = false\n    } = {}) {\n        this.chevronDown = chevronDown;\n        this.chevronUp = chevronUp;\n        this.fontFamilies = ['FontAwesome', 'Font Awesome 5 Free', 'Glyphicons Halflings'];\n        this.fontFamily = fontFamily;\n        this.hasNestedSubmenu = false;\n        this.menu = null;\n        this.menuId = menuId;\n        this.click = click;\n    }\n    clickHandler(evt) {\n        let { target } = evt;\n        let submenuList = null;\n        if (target.localName == \"span\") {\n            target = target.parentElement;\n        }\n        // if the target is the body\n        // if (target.nextSibling === null) {\n        //     // target = document;\n        //     console.log(document);\n        // }\n        \n        if (target.nextSibling === null || target.nextSibling.localName !== 'ul') {\n            console.log('not a ul')\n            submenuList = document.getElementsByClassName('submenu-list-open')\n        } else {\n            submenuList = target.nextSibling;\n        }\n\n\n\n        console.log(target.nextSibling)\n        // find out if there is a nested submenu inside a top level item\n        submenuList.getElementsByTagName('ul').length ? this.hasNestedSubmenu = true : this.hasNestedSubmenu = false;\n        // if something weird happens, don't allow any further event handling.\n        if (!target.getAttribute('aria-haspopup')) return;\n\n        // if we're on a list item that is really just a toggle, \n        // that is it doesn't have a page that it goes to, prevent the page from reloading.\n        target.classList.contains('submenu-toggle') ? evt.preventDefault() : null;\n\n        submenuList.classList.toggle('submenu-list-open');\n        target.setAttribute('aria-expanded', 'true');\n\n        submenuList.classList.contains('submenu-list-open') ? null : target.setAttribute('aria-expanded', 'false');\n    }\n    focusInHandler(evt) {\n        const { target } = evt;\n        const { offsetParent: { parentNode } } = target;\n\n        // if the parentUL isn't the menu and it contains the target return\n        if (parentNode !== this.menu && parentNode.contains(target)) {\n            return\n        } else {\n            // close the submenu when you leave\n            const expandedElementCollection = parentNode.querySelectorAll('[aria-expanded=\"true\"]');\n            const openElementCollection = parentNode.getElementsByClassName('submenu-list-open');\n\n            if (expandedElementCollection.length) {\n                // expandedElementCollection[0].setAttribute('aria-expanded', 'false');\n                // openElementCollection[0].classList.remove('submenu-list-open');\n            }\n        }\n    }\n    keyDownHandler(evt) {\n        const { keyCode, target } = evt;\n        // const { offsetParent: { parentNode } } = target;\n        // const expandedElementCollection = parentNode.querySelectorAll('[aria-expanded=\"true\"]')[0];\n        // const openSubmenu = parentNode.getElementsByClassName('submenu-list-open')[0];\n        const expandedElementCollection = document.querySelectorAll('[aria-expanded=\"true\"]')[0];\n        const openSubmenu = document.getElementsByClassName('submenu-list-open')[0];\n        console.log(openSubmenu)\n        if (keyCode === 27 && openSubmenu) {\n            expandedElementCollection.setAttribute('aria-expanded', 'false');\n            openSubmenu.classList.remove('submenu-list-open');\n        }\n\n    }\n    hoverHandler(evt) {\n        const { type, target } = evt;\n        if (type === 'mouseout' && target.getAttribute('aria-haspopup') === \"true\") {\n            target.setAttribute('aria-expanded', 'false');\n        } else if (type === 'mouseover' && target.getAttribute('aria-haspopup') === \"false\") {\n            target.setAttribute('aria-expanded', 'true');\n        }\n    }\n    eventDispatcher(evt) {\n        // dispatch event listeners to the correct functions.\n        switch (evt.type) {\n            case 'click':\n                this.clickHandler(evt);\n                break;\n            case 'focusin':\n                this.focusInHandler(evt);\n                break;\n            case 'keydown':\n                this.keyDownHandler(evt);\n                break;\n            case 'mouseover':\n            case 'mouseout':\n                this.hoverHandler(evt);\n                break;\n            default:\n                return;\n                break;\n        }\n    }\n    setEventListeners() {\n        // if this script is running, remove the 'no-js' class from the elements.\n        const listElements = Array.prototype.slice.call(this.menu.getElementsByClassName('no-js'));\n        listElements.forEach(element => {\n            element.classList.remove('no-js');\n        });\n        // define a list of possible event listeners\n        let listeners = ['focusin', 'keydown', 'mouseover'];\n\n        if (this.click) {\n            listeners.push('click');\n        } else {\n            listeners.push('mouseout');\n        }\n        // attach them to the document.\n        for (let i = 0; i < listeners.length; i++) {\n            document.addEventListener(listeners[i], (evt) => {\n                // dispatch the events to the class methods.\n                this.eventDispatcher(evt);\n            });\n        }\n    }\n    setSubmenuIcon() {\n        // possible font-family for the icons\n        let fontFamily = this.fontFamily;\n\n        if (!this.fontFamilies.includes(fontFamily)) {\n            fontFamily = '';\n        }\n\n        // the list of all the submenu icons\n        const icons = this.menu.querySelectorAll('.submenu-icon');\n        // the css to inject into the page\n        const hoverCss = `\n      nav ul li span::before {\n        content: '${this.chevronDown}';\n        font-family: '${fontFamily}';\n        font-weight: bold;\n      }\n      nav ul.click-menu li > button[aria-expanded=\"true\"] span::before,\n      nav ul:not(.click-menu) li:hover > button span::before,\n      nav ul li:focus > button span::before { \n        content: '${this.chevronUp}';\n        font-family: '${fontFamily}'; \n        font-weight: bold;\n      }`;\n\n        // create a style tag\n        const style = document.createElement('style');\n        // add the styles to the tag (or a stylesheet if it exists)\n        if (style.styleSheet) {\n            style.styleSheet.cssText = hoverCss;\n        } else {\n            style.appendChild(document.createTextNode(hoverCss));\n        }\n        // add the tag to the <head>\n        document.getElementsByTagName('head')[0].appendChild(style);\n        // set the data-before attribute to the values passed in the constructor.\n        icons.forEach((icon) => {\n            icon.setAttribute('data-before', this.chevronDown);\n        })\n    }\n    init() {\n        this.menu = document.getElementById(this.menuId);\n        this.setEventListeners();\n        this.setSubmenuIcon();\n    }\n}"]}