{"version":3,"sources":["Navigation.js"],"names":["Navigation","_ref","arguments","length","undefined","_ref$menuId","menuId","_ref$fontFamily","fontFamily","_ref$chevronDown","chevronDown","_ref$chevronUp","chevronUp","_ref$click","_classCallCheck","this","menu","click","evt","submenuList","target","fontFamilies","parentElement","nextSibling","localName","getElementsByTagName","hasNestedSubmenu","remove","console","log","classList","toggle","contains","setAttribute","document","getElementsByClassName","previousSibling","expandedElementCollection","querySelectorAll","openElementCollection","parentNode","id","keyCode","openSubmenu","type","getAttribute","clickHandler","focusInHandler","hoverHandler","_this","Array","prototype","slice","call","forEach","element","listeners","keyDownHandler","push","add","i","addEventListener","eventDispatcher","_this2","includes","subMenuList","hoverCss","style","createElement","styleSheet","cssText","appendChild","icons","icon","setEventListeners","setSubmenuIcon"],"mappings":"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","file":"Navigation.js","sourcesContent":["class Navigation {\n    constructor({\n        menuId = 'main-menu',\n        fontFamily = 'Font Awesome 5 Free',\n        chevronDown = '\\\\f078',\n        chevronUp = '\\\\f077',\n        click = false\n    } = {}) {\n        this.chevronDown = chevronDown;\n        this.chevronUp = chevronUp;\n        this.fontFamilies = ['FontAwesome', 'Font Awesome 5 Free', 'Glyphicons Halflings'];\n        this.fontFamily = fontFamily;\n        this.hasNestedSubmenu = false;\n        this.menu = null;\n        this.menuId = menuId;\n        this.click = click;\n    }\n    clickHandler(evt) {\n        let { target } = evt;\n        let submenuList = null;\n\n        // people might click on the icon instead of the button.\n        // if so, set the target to the parent (button)\n        if (target.localName === 'span') {\n            target = target.parentElement;\n        }\n\n        // let's open and close the menu\n\n        // if we're not clicking 'near' a submenu close any open submenus\n        if (target.nextSibling === null || target.nextSibling.localName !== 'ul') {\n\n            // if the submenu is open and we click on something else like the body\n            // close it and set aria-expanded to false\n            if (document.getElementsByClassName('submenu-list-open').length > 0) {\n\n                // there's an open submenu somewhere... we need to close it\n\n                // the submenu <ul>\n                submenuList = document.getElementsByClassName('submenu-list-open')[0];\n\n                // remove the class that displays the submenu\n                submenuList.classList.remove('submenu-list-open');\n\n                // set aria-expanded to false to switch the icon\n                submenuList.previousSibling.setAttribute('aria-expanded', 'false')\n            } else {\n                return;\n            }\n\n        } else {\n\n\n\n            // we're near a submenu by clicking on a button\n            submenuList = target.nextSibling;\n\n            // check if there's a nested submenu\n            submenuList.getElementsByTagName('ul').length \n                ? this.hasNestedSubmenu = true \n                : this.hasNestedSubmenu = false;\n            console.log(this.hasNestedSubmenu, 'nested')\n\n\n            // toggle the submenu display class\n            submenuList.classList.toggle('submenu-list-open');\n\n            // toggle the aria-expanded attribute\n            submenuList.classList.contains('submenu-list-open') \n                ? target.setAttribute('aria-expanded', 'true') \n                : target.setAttribute('aria-expanded', 'false');\n\n\n\n            \n            return;\n        }\n    }\n    focusInHandler(evt) {\n        const { target } = evt;\n        const { offsetParent: { parentNode } } = target;\n\n        let expandedElementCollection = this.menu.querySelectorAll('[aria-expanded=\"true\"]');\n        let openElementCollection = this.menu.getElementsByClassName('submenu-list-open')\n\n        if (!this.menu.contains(target) && expandedElementCollection.length) {\n            // if the menu doesn't contain the target, close all the submenus.\n            expandedElementCollection[0].setAttribute('aria-expanded', 'false');\n            openElementCollection[0].classList.remove('submenu-list-open')\n        } else {\n            // close the submenu when you leave by checking if focus has returned to the parentNode\n            expandedElementCollection = parentNode.querySelectorAll('[aria-expanded=\"true\"]');\n            openElementCollection = parentNode.getElementsByClassName('submenu-list-open');\n\n            if ((parentNode.id === this.menuId) && expandedElementCollection.length) {\n                expandedElementCollection[0].setAttribute('aria-expanded', 'false');\n                openElementCollection[0].classList.remove('submenu-list-open');\n            }\n        }\n        return;\n    }\n    keyDownHandler(evt) {\n        const { keyCode } = evt;\n\n        const expandedElementCollection = document.querySelectorAll('[aria-expanded=\"true\"]')[0];\n        const openSubmenu = document.getElementsByClassName('submenu-list-open')[0];\n\n        if (keyCode === 27 && openSubmenu) {\n            expandedElementCollection.setAttribute('aria-expanded', 'false');\n            openSubmenu.classList.remove('submenu-list-open');\n        }\n\n    }\n    hoverHandler(evt) {\n        const { type, target } = evt;\n        if (type === 'mouseout' && target.getAttribute('aria-haspopup') === \"true\") {\n            target.setAttribute('aria-expanded', 'false');\n        } else if (type === 'mouseover' && target.getAttribute('aria-haspopup') === \"false\") {\n            target.setAttribute('aria-expanded', 'true');\n        }\n    }\n    eventDispatcher(evt) {\n        // dispatch event listeners to the correct functions.\n        switch (evt.type) {\n            case 'click':\n                this.clickHandler(evt);\n                break;\n            case 'focusin':\n                this.focusInHandler(evt);\n                break;\n            case 'keydown':\n                this.keyDownHandler(evt);\n                break;\n            case 'mouseover':\n            case 'mouseout':\n                this.hoverHandler(evt);\n                break;\n            default:\n                return;\n                break;\n        }\n    }\n    setEventListeners() {\n        // if this script is running, remove the 'no-js' class from the elements.\n        const listElements = Array.prototype.slice.call(this.menu.getElementsByClassName('no-js'));\n        listElements.forEach(element => {\n            element.classList.remove('no-js');\n        });\n        // define a list of possible event listeners\n        let listeners = ['focusin', 'keydown', 'mouseover'];\n\n        if (this.click) {\n            listeners.push('click');\n            \n            const subMenuList = this.menu.querySelectorAll('.submenu-list');\n            \n            subMenuList.forEach(menu => menu.classList.add('click-menu'));\n\n        } else {\n            listeners.push('mouseout');\n        }\n        // attach them to the document.\n        for (let i = 0; i < listeners.length; i++) {\n            document.addEventListener(listeners[i], (evt) => {\n                // dispatch the events to the class methods.\n                this.eventDispatcher(evt);\n            });\n        }\n    }\n    setSubmenuIcon() {\n        // possible font-family for the icons\n        let fontFamily = this.fontFamily;\n\n        if (!this.fontFamilies.includes(fontFamily)) {\n            fontFamily = '';\n        }\n\n        // the list of all the submenu icons\n        const icons = this.menu.querySelectorAll('.submenu-icon');\n        // the css to inject into the page\n        const hoverCss = `\n      nav ul li span::before {\n        content: '${this.chevronDown}';\n        font-family: '${fontFamily}';\n        font-weight: bold;\n      }\n      nav ul.click-menu li > button[aria-expanded=\"true\"] span::before,\n      nav ul:not(.click-menu) li:hover > button span::before,\n      nav ul li:focus > button span::before { \n        content: '${this.chevronUp}';\n        font-family: '${fontFamily}'; \n        font-weight: bold;\n      }`;\n\n        // create a style tag\n        const style = document.createElement('style');\n        // add the styles to the tag (or a stylesheet if it exists)\n        if (style.styleSheet) {\n            style.styleSheet.cssText = hoverCss;\n        } else {\n            style.appendChild(document.createTextNode(hoverCss));\n        }\n        // add the tag to the <head>\n        document.getElementsByTagName('head')[0].appendChild(style);\n        // set the data-before attribute to the values passed in the constructor.\n        icons.forEach((icon) => {\n            icon.setAttribute('data-before', this.chevronDown);\n        })\n    }\n    init() {\n        this.menu = document.getElementById(this.menuId);\n        this.setEventListeners();\n        this.setSubmenuIcon();\n    }\n}\n\n"]}