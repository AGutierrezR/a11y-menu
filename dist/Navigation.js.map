{"version":3,"sources":["Navigation.js"],"names":["Navigation","a","b","arguments","length","c","menuId","e","fontFamily","g","chevronDown","i","chevronUp","k","click","_classCallCheck","this","fontFamilies","hasNestedSubmenu","menu","evt","target","submenuList","localName","parentElement","nextSibling","console","log","document","getElementsByClassName","getElementsByTagName","getAttribute","classList","contains","preventDefault","toggle","setAttribute","parentNode","offsetParent","expandedElementCollection","querySelectorAll","keyCode","openSubmenu","remove","type","clickHandler","focusInHandler","keyDownHandler","hoverHandler","Array","prototype","slice","call","forEach","element","listeners","push","addEventListener","eventDispatcher","includes","icons","hoverCss","style","createElement","styleSheet","cssText","appendChild","createTextNode","icon","getElementById","setEventListeners","setSubmenuIcon"],"mappings":"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","file":"Navigation.js","sourcesContent":["class Navigation {\n    constructor({\n        menuId = 'main-menu',\n        fontFamily = 'Font Awesome 5 Free',\n        chevronDown = '\\\\f078',\n        chevronUp = '\\\\f077',\n        click = false\n    } = {}) {\n        this.chevronDown = chevronDown;\n        this.chevronUp = chevronUp;\n        this.fontFamilies = ['FontAwesome', 'Font Awesome 5 Free', 'Glyphicons Halflings'];\n        this.fontFamily = fontFamily;\n        this.hasNestedSubmenu = false;\n        this.menu = null;\n        this.menuId = menuId;\n        this.click = click;\n    }\n    clickHandler(evt) {\n        let { target } = evt;\n        let submenuList = null;\n        if (target.localName == \"span\") {\n            target = target.parentElement;\n        }\n        // if the target is the body\n        // if (target.nextSibling === null) {\n        //     // target = document;\n        //     console.log(document);\n        // }\n        \n        if (target.nextSibling === null || target.nextSibling.localName !== 'ul') {\n            console.log('not a ul')\n            submenuList = document.getElementsByClassName('submenu-list-open')\n        } else {\n            submenuList = target.nextSibling;\n        }\n\n\n\n        console.log(target.nextSibling)\n        // find out if there is a nested submenu inside a top level item\n        submenuList.getElementsByTagName('ul').length ? this.hasNestedSubmenu = true : this.hasNestedSubmenu = false;\n        // if something weird happens, don't allow any further event handling.\n        if (!target.getAttribute('aria-haspopup')) return;\n\n        // if we're on a list item that is really just a toggle, \n        // that is it doesn't have a page that it goes to, prevent the page from reloading.\n        target.classList.contains('submenu-toggle') ? evt.preventDefault() : null;\n\n        submenuList.classList.toggle('submenu-list-open');\n        target.setAttribute('aria-expanded', 'true');\n\n        submenuList.classList.contains('submenu-list-open') ? null : target.setAttribute('aria-expanded', 'false');\n    }\n    focusInHandler(evt) {\n        const { target } = evt;\n        const { offsetParent: { parentNode } } = target;\n\n        // if the parentUL isn't the menu and it contains the target return\n        if (parentNode !== this.menu && parentNode.contains(target)) {\n            return\n        } else {\n            // close the submenu when you leave\n            const expandedElementCollection = parentNode.querySelectorAll('[aria-expanded=\"true\"]');\n            const openElementCollection = parentNode.getElementsByClassName('submenu-list-open');\n\n            if (expandedElementCollection.length) {\n                // expandedElementCollection[0].setAttribute('aria-expanded', 'false');\n                // openElementCollection[0].classList.remove('submenu-list-open');\n            }\n        }\n    }\n    keyDownHandler(evt) {\n        const { keyCode, target } = evt;\n        // const { offsetParent: { parentNode } } = target;\n        // const expandedElementCollection = parentNode.querySelectorAll('[aria-expanded=\"true\"]')[0];\n        // const openSubmenu = parentNode.getElementsByClassName('submenu-list-open')[0];\n        const expandedElementCollection = document.querySelectorAll('[aria-expanded=\"true\"]')[0];\n        const openSubmenu = document.getElementsByClassName('submenu-list-open')[0];\n        console.log(openSubmenu)\n        if (keyCode === 27 && openSubmenu) {\n            expandedElementCollection.setAttribute('aria-expanded', 'false');\n            openSubmenu.classList.remove('submenu-list-open');\n        }\n\n    }\n    hoverHandler(evt) {\n        const { type, target } = evt;\n        if (type === 'mouseout' && target.getAttribute('aria-haspopup') === \"true\") {\n            target.setAttribute('aria-expanded', 'false');\n        } else if (type === 'mouseover' && target.getAttribute('aria-haspopup') === \"false\") {\n            target.setAttribute('aria-expanded', 'true');\n        }\n    }\n    eventDispatcher(evt) {\n        // dispatch event listeners to the correct functions.\n        switch (evt.type) {\n            case 'click':\n                this.clickHandler(evt);\n                break;\n            case 'focusin':\n                this.focusInHandler(evt);\n                break;\n            case 'keydown':\n                this.keyDownHandler(evt);\n                break;\n            case 'mouseover':\n            case 'mouseout':\n                this.hoverHandler(evt);\n                break;\n            default:\n                return;\n                break;\n        }\n    }\n    setEventListeners() {\n        // if this script is running, remove the 'no-js' class from the elements.\n        const listElements = Array.prototype.slice.call(this.menu.getElementsByClassName('no-js'));\n        listElements.forEach(element => {\n            element.classList.remove('no-js');\n        });\n        // define a list of possible event listeners\n        let listeners = ['focusin', 'keydown', 'mouseover'];\n\n        if (this.click) {\n            listeners.push('click');\n        } else {\n            listeners.push('mouseout');\n        }\n        // attach them to the document.\n        for (let i = 0; i < listeners.length; i++) {\n            document.addEventListener(listeners[i], (evt) => {\n                // dispatch the events to the class methods.\n                this.eventDispatcher(evt);\n            });\n        }\n    }\n    setSubmenuIcon() {\n        // possible font-family for the icons\n        let fontFamily = this.fontFamily;\n\n        if (!this.fontFamilies.includes(fontFamily)) {\n            fontFamily = '';\n        }\n\n        // the list of all the submenu icons\n        const icons = this.menu.querySelectorAll('.submenu-icon');\n        // the css to inject into the page\n        const hoverCss = `\n      nav ul li span::before {\n        content: '${this.chevronDown}';\n        font-family: '${fontFamily}';\n        font-weight: bold;\n      }\n      nav ul.click-menu li > button[aria-expanded=\"true\"] span::before,\n      nav ul:not(.click-menu) li:hover > button span::before,\n      nav ul li:focus > button span::before { \n        content: '${this.chevronUp}';\n        font-family: '${fontFamily}'; \n        font-weight: bold;\n      }`;\n\n        // create a style tag\n        const style = document.createElement('style');\n        // add the styles to the tag (or a stylesheet if it exists)\n        if (style.styleSheet) {\n            style.styleSheet.cssText = hoverCss;\n        } else {\n            style.appendChild(document.createTextNode(hoverCss));\n        }\n        // add the tag to the <head>\n        document.getElementsByTagName('head')[0].appendChild(style);\n        // set the data-before attribute to the values passed in the constructor.\n        icons.forEach((icon) => {\n            icon.setAttribute('data-before', this.chevronDown);\n        })\n    }\n    init() {\n        this.menu = document.getElementById(this.menuId);\n        this.setEventListeners();\n        this.setSubmenuIcon();\n    }\n}"]}