{"version":3,"sources":["Navigation.js"],"names":["Navigation","_ref","arguments","length","undefined","_ref$menuId","menuId","_ref$fontFamily","fontFamily","_ref$chevronDown","chevronDown","_ref$chevronUp","chevronUp","_ref$click","_classCallCheck","this","menu","click","evt","submenuList","target","localName","parentElement","fontFamilies","nextSibling","getElementsByTagName","hasNestedSubmenu","getAttribute","classList","preventDefault","setAttribute","parentNode","offsetParent","expandedElementCollection","querySelectorAll","getElementsByClassName","openElementCollection","remove","contains","keyCode","document","openSubmenu","type","hoverHandler","prototype","slice","element","listeners","push","clickHandler","i","focusInHandler","addEventListener","_this","eventDispatcher","keyDownHandler","_this2","includes","icons","hoverCss","listElements","style","styleSheet","appendChild","createTextNode","forEach","icon","setSubmenuIcon"],"mappings":"iYAAMA,sBACF,SAAAA,IAAA,IAAAC,EAAAC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAA,GAAAG,EAAAJ,EACIK,OAAAA,OADJF,IAAAC,EACa,YADbA,EAAAE,EAAAN,EAEIO,WAAAA,OAFJJ,IAAAG,EAEiB,sBAFjBA,EAAAE,EAAAR,EAGIS,YAAAA,OAHJN,IAAAK,EAGkB,SAHlBA,EAAAE,EAAAV,EAIIW,UAAAA,OAJJR,IAAAO,EAIgB,SAJhBA,EAAAE,EAAAZ,EADED,MAAAA,OACFI,IAAAS,GAAAA,EAAAC,gBAAAC,KAAAf,GAMQe,KAAAL,YAAAA,EAAAK,KAAAH,UAAAA,EAAAG,KALJT,aAKI,CAAA,cAAA,sBAAA,wBAAAS,KAAAP,WAAAA,EAAAO,KAJJP,kBAII,EAAAO,KAAAC,KAAA,KAAAD,KAHJL,OAAAA,EAGIK,KAAAE,MAAAA,4DAAAC,GAAA,IADJD,EACIC,EADJD,OAaIE,EAAc,KAZd,QAAAC,EAAAC,YAcAD,EAASA,EAAOE,gBAVpBH,EADqB,OAArBC,EAAKG,aAAsD,OAAvCH,EAAgBI,YAAAH,UAClBb,SAAAA,uBAAlB,qBAEAY,EAAAI,aAkBYC,qBAAqB,MAAMtB,OAASY,KAAKW,kBAAmB,EAAOX,KAAKW,kBAAmB,EAElGN,EAAOO,aAAa,mBAdzBP,EAAAQ,UAAIT,SAAJ,mBAAAD,EAAAW,iBAEIT,EAAAA,UAASA,OAAOE,qBACnBF,EAAAU,aAAA,gBAAA,SAEDX,EAAIC,UAAOI,SAAgB,sBAA2BH,EAAnBS,aAAuC,gBAAA,iDAEnEZ,GAAA,IACHC,EAAAA,EAAAA,OACHY,EAAAX,EAAAY,aAAAD,WAEDE,EAAAlB,KAAAC,KAAAkB,iBAAA,0BACAf,EAAYM,KAAAA,KAAqBU,uBAAoBT,sBAErDX,KAAKK,KAAAA,SAAOO,IAAaM,EAAkB9B,QAE3C8B,EAAA,GAAAH,aAAA,gBAAA,SACAM,EAAA,GAAAR,UAAAS,OAAA,uBAGAlB,EAAAY,EAA6BG,iBAA7B,0BACAd,EAAoBW,EAApBI,uBAAA,qBAEAhB,EAAYS,KAAUU,KAAAA,QAASL,EAA8Bb,SAChEa,EAAA,GAAAH,aAAA,gBAAA,SAmBWM,EAAsB,GAAGR,UAAUS,OAAO,8DAKvCnB,GAAK,IACRqB,EAAYrB,EAAZqB,QAnBRN,EAA4BO,SAAUL,iBAAAA,0BAAtC,GAsBMM,EAAcD,SAASL,uBAAuB,qBAAqB,GAnBrE,KAAAI,GAAAE,IACAR,EAAAA,aAA6BH,gBAAa,SAC1CM,EAAAA,UAAAA,OAAyBR,2DAIzBQ,GAAAA,IAsBIM,EAAiBxB,EAAjBwB,KAAMtB,EAAWF,EAAXE,OApBLW,aAALW,GAAuCT,SAAlCb,EAAkBO,aAAgBM,iBACnCA,EAAAA,aAAAA,gBAA6BH,SAC7BM,cAAAA,GAAA,UAAAhB,EAAyBQ,aAAiB,kBAC7CR,EAAAU,aAAA,gBAAA,gDAGRZ,GAuBG,OAAQA,EAAIwB,MACR,IAAK,QAtBDH,KAAAA,aAAAA,GAwBA,MACJ,IAAK,UAvBHN,KAAAA,eAAAA,GACAQ,MAyBF,IAAK,UAvBLF,KAAAA,eAAkBE,GAClBR,MACAQ,IAAAA,YACH,IAAA,WAEJ1B,KAAA4B,aAAAzB,GAwBW,MACJ,QACI,oDAvBJwB,IAAAA,EAAAA,KAEOA,MAASE,UAATC,MAAwBzB,KAAOO,KAAAA,KAAPQ,uBAAyC,UACxEf,QAAOU,SAAAA,GACVgB,EAAAlB,UAAAS,OAAA,WA8BD,IAAIU,EAAY,CAAC,UAAW,UAAW,aA3BvChC,KAAAE,MACA8B,EAAQ7B,KAAIwB,SAEJK,EAAAC,KAAKC,YAGL,IAAA,IAAAC,EAAA,EAAAA,EAAKC,EAAAA,OAALD,IACAV,SAAAY,iBAAAL,EAAAG,GAAA,SAAAhC,GAEAmC,EAAAC,gBAAKC,8CAIL,IAAAC,EAAAzC,KAEJP,EAAAO,KAAAP,WAEIO,KAAAQ,aAAAkC,SAAAjD,KAhBRA,EAAA,IAkDA,IAAMkD,EAAQ3C,KAAKC,KAAKkB,iBA/BR,iBAiCVyB,EAAAA,uDA/BAC,KAAAA,YA+BA,6BA9BNA,EA8BM,wPAxBF7C,KAAKE,UAwBH,6BAvBF8B,EAuBE,2CAlBNc,EAASX,SAAOA,cAAc/C,SAEtB0D,EAAAC,WACAD,EAAAC,WAAKR,QAAAA,EAEZO,EAAAE,YAAAvB,SAAAwB,eAAAL,IAoCDnB,SAASf,qBAAqB,QAAQ,GAAGsC,YAAYF,GAlCxCH,EAAAO,QAAA,SAAAC,GAqCTA,EAAKpC,aAAa,cAAe0B,EAAK9C,8CAjC1CK,KAAAC,KAAKwB,SAAKjB,eAAsBf,KAAAA,QAC5BA,KAAAA,oBACHO,KAAAoD","file":"Navigation.js","sourcesContent":["class Navigation {\n    constructor({\n        menuId = 'main-menu',\n        fontFamily = 'Font Awesome 5 Free',\n        chevronDown = '\\\\f078',\n        chevronUp = '\\\\f077',\n        click = false\n    } = {}) {\n        this.chevronDown = chevronDown;\n        this.chevronUp = chevronUp;\n        this.fontFamilies = ['FontAwesome', 'Font Awesome 5 Free', 'Glyphicons Halflings'];\n        this.fontFamily = fontFamily;\n        this.hasNestedSubmenu = false;\n        this.menu = null;\n        this.menuId = menuId;\n        this.click = click;\n    }\n    clickHandler(evt) {\n        let { target } = evt;\n        let submenuList = null;\n        if (target.localName == \"span\") {\n            target = target.parentElement;\n        }\n        \n        if (target.nextSibling === null || target.nextSibling.localName !== 'ul') {\n            submenuList = document.getElementsByClassName('submenu-list-open')\n        } else {\n            submenuList = target.nextSibling;\n        }\n\n        // find out if there is a nested submenu inside a top level item\n        submenuList.getElementsByTagName('ul').length ? this.hasNestedSubmenu = true : this.hasNestedSubmenu = false;\n        // if something weird happens, don't allow any further event handling.\n        if (!target.getAttribute('aria-haspopup')) return;\n\n        // if we're on a list item that is really just a toggle, \n        // that is it doesn't have a page that it goes to, prevent the page from reloading.\n        target.classList.contains('submenu-toggle') ? evt.preventDefault() : null;\n\n        submenuList.classList.toggle('submenu-list-open');\n        target.setAttribute('aria-expanded', 'true');\n\n        submenuList.classList.contains('submenu-list-open') ? null : target.setAttribute('aria-expanded', 'false');\n    }\n    focusInHandler(evt) {\n        const { target } = evt;\n        const { offsetParent: { parentNode } } = target;\n\n        let expandedElementCollection = this.menu.querySelectorAll('[aria-expanded=\"true\"]');\n        let openElementCollection = this.menu.getElementsByClassName('submenu-list-open')\n\n        if (!this.menu.contains(target) && expandedElementCollection.length) {\n            // if the menu doesn't contain the target, close all the submenus.\n            expandedElementCollection[0].setAttribute('aria-expanded', 'false');\n            openElementCollection[0].classList.remove('submenu-list-open')\n        } else {\n            // close the submenu when you leave by checking if focus has returned to the parentNode\n            expandedElementCollection = parentNode.querySelectorAll('[aria-expanded=\"true\"]');\n            openElementCollection = parentNode.getElementsByClassName('submenu-list-open');\n\n            if ((parentNode.id === this.menuId) && expandedElementCollection.length) {\n                expandedElementCollection[0].setAttribute('aria-expanded', 'false');\n                openElementCollection[0].classList.remove('submenu-list-open');\n            }\n        }\n        return;\n    }\n    keyDownHandler(evt) {\n        const { keyCode } = evt;\n\n        const expandedElementCollection = document.querySelectorAll('[aria-expanded=\"true\"]')[0];\n        const openSubmenu = document.getElementsByClassName('submenu-list-open')[0];\n\n        if (keyCode === 27 && openSubmenu) {\n            expandedElementCollection.setAttribute('aria-expanded', 'false');\n            openSubmenu.classList.remove('submenu-list-open');\n        }\n\n    }\n    hoverHandler(evt) {\n        const { type, target } = evt;\n        if (type === 'mouseout' && target.getAttribute('aria-haspopup') === \"true\") {\n            target.setAttribute('aria-expanded', 'false');\n        } else if (type === 'mouseover' && target.getAttribute('aria-haspopup') === \"false\") {\n            target.setAttribute('aria-expanded', 'true');\n        }\n    }\n    eventDispatcher(evt) {\n        // dispatch event listeners to the correct functions.\n        switch (evt.type) {\n            case 'click':\n                this.clickHandler(evt);\n                break;\n            case 'focusin':\n                this.focusInHandler(evt);\n                break;\n            case 'keydown':\n                this.keyDownHandler(evt);\n                break;\n            case 'mouseover':\n            case 'mouseout':\n                this.hoverHandler(evt);\n                break;\n            default:\n                return;\n                break;\n        }\n    }\n    setEventListeners() {\n        // if this script is running, remove the 'no-js' class from the elements.\n        const listElements = Array.prototype.slice.call(this.menu.getElementsByClassName('no-js'));\n        listElements.forEach(element => {\n            element.classList.remove('no-js');\n        });\n        // define a list of possible event listeners\n        let listeners = ['focusin', 'keydown', 'mouseover'];\n\n        if (this.click) {\n            listeners.push('click');\n        } else {\n            listeners.push('mouseout');\n        }\n        // attach them to the document.\n        for (let i = 0; i < listeners.length; i++) {\n            document.addEventListener(listeners[i], (evt) => {\n                // dispatch the events to the class methods.\n                this.eventDispatcher(evt);\n            });\n        }\n    }\n    setSubmenuIcon() {\n        // possible font-family for the icons\n        let fontFamily = this.fontFamily;\n\n        if (!this.fontFamilies.includes(fontFamily)) {\n            fontFamily = '';\n        }\n\n        // the list of all the submenu icons\n        const icons = this.menu.querySelectorAll('.submenu-icon');\n        // the css to inject into the page\n        const hoverCss = `\n      nav ul li span::before {\n        content: '${this.chevronDown}';\n        font-family: '${fontFamily}';\n        font-weight: bold;\n      }\n      nav ul.click-menu li > button[aria-expanded=\"true\"] span::before,\n      nav ul:not(.click-menu) li:hover > button span::before,\n      nav ul li:focus > button span::before { \n        content: '${this.chevronUp}';\n        font-family: '${fontFamily}'; \n        font-weight: bold;\n      }`;\n\n        // create a style tag\n        const style = document.createElement('style');\n        // add the styles to the tag (or a stylesheet if it exists)\n        if (style.styleSheet) {\n            style.styleSheet.cssText = hoverCss;\n        } else {\n            style.appendChild(document.createTextNode(hoverCss));\n        }\n        // add the tag to the <head>\n        document.getElementsByTagName('head')[0].appendChild(style);\n        // set the data-before attribute to the values passed in the constructor.\n        icons.forEach((icon) => {\n            icon.setAttribute('data-before', this.chevronDown);\n        })\n    }\n    init() {\n        this.menu = document.getElementById(this.menuId);\n        this.setEventListeners();\n        this.setSubmenuIcon();\n    }\n}\n\n"]}