{"version":3,"sources":["Navigation.js"],"names":["Navigation","_ref","arguments","length","undefined","_ref$menuId","menuId","_ref$fontFamily","fontFamily","_ref$chevronDown","chevronDown","_ref$chevronUp","_classCallCheck","this","chevronUp","fontFamilies","hasNestedSubmenu","element","localName","icon","setAttribute","menu","evt","target","nextSibling","submenuList","getElementsByTagName","getAttribute","children","preventDefault","toggle","classList","contains","parentUL","parentNode","offsetParent","querySelectorAll","openElementCollection","getElementsByClassName","expandedElementCollection","remove","chevronSwitcher","relatedTarget","type","clickHandler","focusInHandler","_this","Array","prototype","slice","call","listeners","i","addEventListener","eventDispatcher","includes","icons","hoverCss","style","styleSheet","cssText","appendChild","document","createTextNode","forEach","_this2","getElementById","setEventListeners","setSubmenuIcon","module","exports"],"mappings":"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","file":"Navigation.js","sourcesContent":["class Navigation {\n  constructor(\n    {\n      menuId = 'main-menu',\n      fontFamily = 'Font Awesome 5 Free',\n      chevronDown = '\\\\f078',\n      chevronUp = '\\\\f077'\n    } = {}\n  ) {\n    this.chevronDown = chevronDown;\n    this.chevronUp = chevronUp;\n    this.fontFamilies = ['FontAwesome', 'Font Awesome 5 Free', 'Glyphicons Halflings'];\n    this.fontFamily = fontFamily;\n    this.hasNestedSubmenu = false;\n    this.menu = null;\n    this.menuId = menuId;\n  }\n  chevronSwitcher(element) {\n    if (element.localName !== \"button\") return;\n    \n    const icon = element.children[0];\n\n    element.getAttribute('aria-expanded') === 'true' ? icon.setAttribute('data-before', this.chevronUp) : icon.setAttribute('data-before', this.chevronDown);\n  }\n  clickHandler(evt) {\n    const target = evt.target;\n    const submenuList = target.nextSibling;\n    // find out if there is a nested submenu inside a top level item\n    submenuList.getElementsByTagName('ul').length ? this.hasNestedSubmenu = true : this.hasNestedSubmenu = false;\n    // if something weird happens, don't allow any further event handling.\n    if (!target.getAttribute('aria-haspopup')) return;\n\n    // if we're on a list item that is really just a toggle, \n    // that is it doesn't have a page that it goes to, prevent the page from reloading.\n    target.className === 'submenu-toggle' ? evt.preventDefault() : null;\n\n    submenuList.classList.toggle('submenu-list-open');\n    target.setAttribute('aria-expanded', 'true');\n\n    submenuList.classList.contains('submenu-list-open') ? null : target.setAttribute('aria-expanded', 'false');\n\n    if (target.children) {\n      this.chevronSwitcher(target);\n    }\n  }\n  focusInHandler(evt) {\n    const { target, relatedTarget } = evt;\n    const { parentNode, offsetParent } = target;\n    const parentUL = offsetParent.parentNode;\n \n    // if the parentUL isn't the menu and it contains the target return\n    if (parentUL !== this.menu && parentUL.contains(target)) {\n      return\n    } else {\n      // close the submenu when you leave\n      const expandedElementCollection = parentUL.querySelectorAll('[aria-expanded=\"true\"]');\n      const openElementCollection = parentUL.getElementsByClassName('submenu-list-open');\n\n      if (expandedElementCollection.length) {\n        expandedElementCollection[0].setAttribute('aria-expanded', 'false');\n        openElementCollection[0].classList.remove('submenu-list-open');\n        this.chevronSwitcher(expandedElementCollection[0]);\n      }\n    }\n  }\n  hoverHandler(evt) {\n    const { type, target } = evt;\n    if (type === 'mouseout' && target.getAttribute('aria-haspopup') === \"true\") {\n      target.setAttribute('aria-expanded', 'false');\n    } else if (type === 'mouseover' && target.getAttribute('aria-haspopup') === \"false\") {\n      target.setAttribute('aria-expanded', 'true');\n    }\n\n    // if you hover and the htmlcollection length is greater than 0\n    if (target.children.length > 0) {\n      this.chevronSwitcher(target);\n    }\n  }\n  eventDispatcher(evt) {\n    // dispatch event listeners to the correct functions.\n    switch (evt.type) {\n      case 'click':\n        this.clickHandler(evt);\n        break;\n      case 'focusin':\n        this.focusInHandler(evt);\n        break;\n      case 'mouseover':\n      case 'mouseout':\n        this.hoverHandler(evt);\n        break;\n      default:\n        return;\n        break;\n    }\n  }\n  setEventListeners() {\n    // if this script is running, remove the 'no-js' class from the elements.\n    const listElements = Array.prototype.slice.call(this.menu.getElementsByClassName('no-js'));\n    listElements.forEach(element => {\n      element.classList.remove('no-js');\n    });\n    // define a list of possible event listeners\n    const listeners = ['click', 'focusin', 'mouseout', 'mouseover'];\n    // attach them to the menu.\n    for (let i = 0; i < listeners.length; i++) {\n      this.menu.addEventListener(listeners[i], (evt) => {\n        // dispatch the events to the class methods.\n        this.eventDispatcher(evt);\n      });\n    }\n  }\n  setSubmenuIcon() {\n    // possible font-family for the icons\n    let fontFamily = this.fontFamily;\n\n    if (!this.fontFamilies.includes(fontFamily)) {\n      fontFamily = '';\n    }\n\n    // the list of all the submenu icons\n    const icons = this.menu.querySelectorAll('.submenu-icon');\n    // the css to inject into the page\n    const hoverCss = `\n      nav ul li span::before {\n        content: '${this.chevronDown}';\n        font-family: '${fontFamily}';\n        font-weight: bold;\n      }\n      nav ul li:hover > button span::before,\n      nav ul li:focus > button span::before { \n        content: '${this.chevronUp}';\n        font-family: '${fontFamily}'; \n        font-weight: bold;\n      }`;\n\n    // create a style tag\n    const style = document.createElement('style');\n    // add the styles to the tag (or a stylesheet if it exists)\n    if (style.styleSheet) {\n      style.styleSheet.cssText = hoverCss;\n    } else {\n      style.appendChild(document.createTextNode(hoverCss));\n    }\n    // add the tag to the <head>\n    document.getElementsByTagName('head')[0].appendChild(style);\n    // set the data-before attribute to the values passed in the constructor.\n    icons.forEach((icon) => {\n      icon.setAttribute('data-before', this.chevronDown);\n    })\n  }\n  init() {\n    this.menu = document.getElementById(this.menuId);\n    this.setEventListeners();\n    this.setSubmenuIcon();\n  }\n}\n/* start-remove */\nmodule.exports = Navigation;\n/* end-remove */"]}