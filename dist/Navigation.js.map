{"version":3,"sources":["Navigation.js"],"names":["Navigation","_ref","arguments","length","undefined","_ref$menuId","menuId","_ref$fontFamily","fontFamily","_ref$chevronDown","chevronDown","_ref$chevronUp","chevronUp","_ref$click","_classCallCheck","this","menu","click","evt","openSubmenuCollection","document","querySelectorAll","target","submenuList","fontFamilies","contains","console","log","nextSibling","localName","classList","add","setAttribute","remove","previousSibling","toggle","hasNestedSubmenu","toggleMenu","preventDefault","keyCode","expandedElementCollection","openSubmenu","getElementsByClassName","type","getAttribute","parentNode","offsetParent","openElementCollection","clickHandler","mouseDownHandler","focusInHandler","keyDownHandler","hoverHandler","_this","Array","prototype","slice","call","forEach","element","listeners","push","i","addEventListener","eventDispatcher","_this2","includes","hoverCss","style","styleSheet","cssText","appendChild","createTextNode","getElementsByTagName","icons","icon","getElementById","setEventListeners","setSubmenuIcon"],"mappings":"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","file":"Navigation.js","sourcesContent":["class Navigation {\n    constructor({\n        menuId = 'main-menu',\n        fontFamily = 'Font Awesome 5 Free',\n        chevronDown = '\\\\f078',\n        chevronUp = '\\\\f077',\n        click = false\n    } = {}) {\n        this.chevronDown = chevronDown;\n        this.chevronUp = chevronUp;\n        this.fontFamilies = ['FontAwesome', 'Font Awesome 5 Free', 'Glyphicons Halflings'];\n        this.fontFamily = fontFamily;\n        this.hasNestedSubmenu = false;\n        this.menu = null;\n        this.menuId = menuId;\n        this.click = click;\n    }\n    clickHandler(evt) {\n        // let openSubmenuCollection = document.getElementsByClassName('submenu-list-open');\n        let openSubmenuCollection = document.querySelectorAll('.submenu-list-open');\n        let { target } = evt;\n        let submenuList = null;\n        // people might click on the icon instead of the button.\n        // if so, set the target to the parent (button)\n        if (target.localName === 'span') {\n            target = target.parentElement;\n        }\n        \n        // let's open and close the menu\n\n        // openSubmenuCollection = document.querySelectorAll('submenu-list-open');\n\n        // if the submenu is open and we click on something else like the body\n        // close it and set aria-expanded to false\n        if (openSubmenuCollection.length > 0 && !openSubmenuCollection[0].contains(target)) {\n            // there's an open submenu somewhere... we need to close it\n\n            // the submenu <ul>\n            submenuList = openSubmenuCollection[0];\n\n            console.log(target.nextSibling)\n\n            if (target.nextSibling && target.nextSibling.localName === 'ul') {\n                \n                // open the next menu immediately.\n                const nextMenu = target.nextSibling;\n                nextMenu.classList.add('submenu-list-open');\n                target.setAttribute('aria-expanded', 'true');\n    \n                // remove the class that displays the submenu\n                submenuList.classList.remove('submenu-list-open');\n    \n                // set aria-expanded to false to switch the icon\n                submenuList.previousSibling.setAttribute('aria-expanded', 'false')\n            } else {\n                // this needs to be refactored into a single function... see the next else statement\n                // toggle the submenu display class\n                submenuList.classList.toggle('submenu-list-open');\n\n                // toggle the aria-expanded attribute\n                // submenuList.classList.contains('submenu-list-open')\n                //     ? target.setAttribute('aria-expanded', 'true')\n                //     : target.setAttribute('aria-expanded', 'false');\n            }\n            // return;\n        } else {\n            // openSubmenuCollection = document.querySelectorAll('submenu-list-open');\n            // we're near a submenu by clicking on a button\n            submenuList = target.nextSibling;\n            console.log(submenuList)\n            // check if there's a nested submenu\n            submenuList.getElementsByTagName('ul').length \n                ? this.hasNestedSubmenu = true \n                : this.hasNestedSubmenu = false;\n\n            // toggle the submenu display class\n            submenuList.classList.toggle('submenu-list-open');\n\n            // toggle the aria-expanded attribute\n            // submenuList.classList.contains('submenu-list-open') \n            //     ? target.setAttribute('aria-expanded', 'true') \n            //     : target.setAttribute('aria-expanded', 'false');\n\n            // return;\n        }\n\n        \n        console.log(openSubmenuCollection);\n        // Array.from(openSubmenuCollection).forEach(item => {\n        //     console.log(item, 'item')\n        //     // item.classList.toggle('submenu-list-open');\n        //     item.classList.contains('submenu-list-open')\n        //         ? target.setAttribute('aria-expanded', 'true')\n        //         : target.setAttribute('aria-expanded', 'false');\n        // })\n\n    }\n    focusInHandler(evt) {\n        const { target } = evt;\n        this.toggleMenu(target);\n        evt.preventDefault();\n    }\n    keyDownHandler(evt) {\n        const { keyCode } = evt;\n        const expandedElementCollection = document.querySelectorAll('[aria-expanded=\"true\"]')[0];\n        const openSubmenu = document.getElementsByClassName('submenu-list-open')[0];\n\n        if (keyCode === 27 && openSubmenu) {\n            expandedElementCollection.setAttribute('aria-expanded', 'false');\n            openSubmenu.classList.remove('submenu-list-open');\n        }\n    }\n    /**\n     *  When people click on a button, prevent it from gaining focus.\n     *  If the button has focus, it will not allow the submenu to close correctly.\n     *\n     * @param {object} evt\n     * @memberof Navigation\n     */\n    mouseDownHandler(evt) {\n        evt.preventDefault();\n    }\n    hoverHandler(evt) {\n        const { type, target } = evt;\n        if (type === 'mouseout' && target.getAttribute('aria-haspopup') === \"true\") {\n            target.setAttribute('aria-expanded', 'false');\n        } else if (type === 'mouseover' && target.getAttribute('aria-haspopup') === \"false\") {\n            target.setAttribute('aria-expanded', 'true');\n        }\n    }\n    toggleMenu(target) {\n        \n        const { offsetParent: { parentNode } } = target;\n        let expandedElementCollection = this.menu.querySelectorAll('[aria-expanded=\"true\"]');\n        let openElementCollection = this.menu.getElementsByClassName('submenu-list-open')\n\n\n        if (!this.menu.contains(target) && expandedElementCollection.length) {\n            // if the menu doesn't contain the target, close all the submenus.\n            // this is only needed for tabbing out of open submenus into something out of the nav.\n            expandedElementCollection[0].setAttribute('aria-expanded', 'false');\n            openElementCollection[0].classList.remove('submenu-list-open')\n\n        } else {\n            // close the submenu when you leave by checking if focus has returned to the parentNode\n            expandedElementCollection = parentNode.querySelectorAll('[aria-expanded=\"true\"]');\n            openElementCollection = parentNode.getElementsByClassName('submenu-list-open');\n\n            if ((parentNode.id === this.menuId || parentNode.localName === 'ul') &&\n                expandedElementCollection.length) {\n                expandedElementCollection[0].setAttribute('aria-expanded', 'false');\n                openElementCollection[0].classList.remove('submenu-list-open');\n            }\n        }\n        console.log({ target, expandedElementCollection, openElementCollection })\n        return;\n    }\n    eventDispatcher(evt) {\n        // dispatch event listeners to the correct functions.\n        switch (evt.type) {\n            case 'click':\n                this.clickHandler(evt);\n                break;\n            case 'mousedown':\n                this.mouseDownHandler(evt);\n                break;\n            case 'focusin':\n                this.focusInHandler(evt);\n                break;\n            case 'keydown':\n                this.keyDownHandler(evt);\n                break;\n            case 'mouseover':\n            case 'mouseout':\n                this.hoverHandler(evt);\n                break;\n            default:\n                return;\n                break;\n        }\n    }\n    setEventListeners() {\n        // if this script is running, remove the 'no-js' class from the elements.\n        const listElements = Array.prototype.slice.call(this.menu.getElementsByClassName('no-js'));\n        listElements.forEach(element => {\n            element.classList.remove('no-js');\n        });\n        // define a list of possible event listeners\n        let listeners = ['focusin', 'keydown', 'mouseover'];\n\n        if (this.click) {\n            listeners.push('click', 'mousedown');\n            \n            const subMenuList = this.menu.querySelectorAll('.submenu-list');\n            \n            subMenuList.forEach(menu => menu.classList.add('click-menu'));\n\n        } else {\n            listeners.push('mouseout');\n        }\n        // attach them to the document.\n        for (let i = 0; i < listeners.length; i++) {\n            document.addEventListener(listeners[i], (evt) => {\n                // dispatch the events to the class methods.\n                this.eventDispatcher(evt);\n            });\n        }\n    }\n    setSubmenuIcon() {\n        // possible font-family for the icons\n        let fontFamily = this.fontFamily;\n\n        if (!this.fontFamilies.includes(fontFamily)) {\n            fontFamily = '';\n        }\n\n        // the list of all the submenu icons\n        const icons = this.menu.querySelectorAll('.submenu-icon');\n        // the css to inject into the page\n        const hoverCss = `\n            nav ul li span::before {\n                content: '${this.chevronDown}';\n                font-family: '${fontFamily}';\n                font-weight: bold;\n            }\n            nav ul.click-menu li > button[aria-expanded=\"true\"] span::before,\n            nav ul:not(.click-menu) li:hover > button span::before,\n            nav ul li:focus > button span::before { \n                content: '${this.chevronUp}';\n                font-family: '${fontFamily}'; \n                font-weight: bold;\n            }`;\n\n        // create a style tag\n        const style = document.createElement('style');\n\n        // add the styles to the tag (or a stylesheet if it exists)\n        if (style.styleSheet) {\n            style.styleSheet.cssText = hoverCss;\n        } else {\n            style.appendChild(document.createTextNode(hoverCss));\n        }\n\n        // add the tag to the <head>\n        document.getElementsByTagName('head')[0].appendChild(style);\n\n        // set the data-before attribute to the values passed in the constructor.\n        icons.forEach((icon) => icon.setAttribute('data-before', this.chevronDown));\n\n        return;\n    }\n    init() {\n        this.menu = document.getElementById(this.menuId);\n        this.setEventListeners();\n        this.setSubmenuIcon();\n    }\n}\n\n"]}