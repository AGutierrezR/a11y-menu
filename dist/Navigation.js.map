{"version":3,"sources":["Navigation.js"],"names":["Navigation","_ref","arguments","length","undefined","_ref$menuId","menuId","_ref$fontFamily","fontFamily","_ref$chevronDown","chevronDown","_ref$chevronUp","chevronUp","_ref$click","_classCallCheck","this","menu","click","evt","console","type","target","submenuList","fontFamilies","document","getElementsByClassName","contains","nextSibling","localName","parentElement","classList","remove","previousSibling","setAttribute","getElementsByTagName","hasNestedSubmenu","nextMenu","toggle","toggleMenu","expandedElementCollection","querySelectorAll","openSubmenu","keyCode","preventDefault","getAttribute","openElementCollection","parentNode","id","log","_this","add","submenuNodeList","forEach","el","toggleSubmenuMenuClass","toggleButtonAria","_this2","_this3","nextElementSibling","childNodes","child","querySelector","submenuChildren","focusInHandler","clickHandler","escapeHandler","elNode","_this4","Array","prototype","slice","call","element","listeners","push","i","eventDispatcher","_this5","includes","listElements","hoverCss","style","createElement","styleSheet","appendChild","createTextNode","icons","icon","getElementById","setEventListeners","setSubmenuIcon"],"mappings":"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","file":"Navigation.js","sourcesContent":["class Navigation {\n    constructor({\n        menuId = 'main-menu',\n        fontFamily = 'Font Awesome 5 Free',\n        chevronDown = '\\\\f078',\n        chevronUp = '\\\\f077',\n        click = false\n    } = {}) {\n        this.chevronDown = chevronDown;\n        this.chevronUp = chevronUp;\n        this.fontFamilies = ['FontAwesome', 'Font Awesome 5 Free', 'Glyphicons Halflings'];\n        this.fontFamily = fontFamily;\n        this.hasNestedSubmenu = false;\n        this.menu = null;\n        this.menuId = menuId;\n        this.click = click;\n    }\n    clickHandlerOld(evt) {\n        console.log(evt.type, 'click')\n        \n        let { target } = evt;\n        let submenuList = null;\n        // people might click on the icon instead of the button.\n        // if so, set the target to the parent (button)\n        if (target.localName === 'span') {\n            target = target.parentElement;\n        }\n\n        // let's open and close the menu\n\n\n            // if the submenu is open and we click on something else like the body\n            // close it and set aria-expanded to false\n        if (document.getElementsByClassName('submenu-list-open').length > 0 && !document.getElementsByClassName('submenu-list-open')[0].contains(target)) {\n\n            // there's an open submenu somewhere... we need to close it\n\n            // the submenu <ul>\n            submenuList = document.getElementsByClassName('submenu-list-open')[0];\n\n            // open the next menu immediately.\n            const nextMenu = target.nextSibling;\n            nextMenu.classList.add('submenu-list-open');\n            target.setAttribute('aria-expanded', 'true');\n\n            // remove the class that displays the submenu\n            submenuList.classList.remove('submenu-list-open');\n\n            // set aria-expanded to false to switch the icon\n            submenuList.previousSibling.setAttribute('aria-expanded', 'false')\n            return;\n        } else {\n\n            // we're near a submenu by clicking on a button\n            submenuList = target.nextSibling;\n\n            // check if there's a nested submenu\n            submenuList.getElementsByTagName('ul').length \n                ? this.hasNestedSubmenu = true \n                : this.hasNestedSubmenu = false;\n\n            // toggle the submenu display class\n            submenuList.classList.toggle('submenu-list-open');\n\n            // toggle the aria-expanded attribute\n            submenuList.classList.contains('submenu-list-open') \n                ? target.setAttribute('aria-expanded', 'true') \n                : target.setAttribute('aria-expanded', 'false');\n\n            return;\n        }\n    }\n    focusInHandlerOld(evt) {\n        const { target } = evt;\n        this.toggleMenu(target);\n        evt.preventDefault();\n    }\n    keyDownHandlerOld(evt) {\n        const { keyCode } = evt;\n        const expandedElementCollection = document.querySelectorAll('[aria-expanded=\"true\"]')[0];\n        const openSubmenu = document.getElementsByClassName('submenu-list-open')[0];\n\n        if (keyCode === 27 && openSubmenu) {\n            expandedElementCollection.setAttribute('aria-expanded', 'false');\n            openSubmenu.classList.remove('submenu-list-open');\n        }\n    }\n    mouseDownHandler(evt) {\n        evt.preventDefault();\n    }\n    hoverHandler(evt) {\n        const { type, target } = evt;\n        if (type === 'mouseout' && target.getAttribute('aria-haspopup') === \"true\") {\n            target.setAttribute('aria-expanded', 'false');\n        } else if (type === 'mouseover' && target.getAttribute('aria-haspopup') === \"false\") {\n            target.setAttribute('aria-expanded', 'true');\n        }\n    }\n    toggleMenuOld(target) {\n        \n        const { offsetParent: { parentNode } } = target;\n        let expandedElementCollection = this.menu.querySelectorAll('[aria-expanded=\"true\"]');\n        let openElementCollection = this.menu.getElementsByClassName('submenu-list-open')\n\n\n        if (!this.menu.contains(target) && expandedElementCollection.length) {\n            // if the menu doesn't contain the target, close all the submenus.\n            // this is only needed for tabbing out of open submenus into something out of the nav.\n            expandedElementCollection[0].setAttribute('aria-expanded', 'false');\n            openElementCollection[0].classList.remove('submenu-list-open')\n\n        } else {\n            // close the submenu when you leave by checking if focus has returned to the parentNode\n            expandedElementCollection = parentNode.querySelectorAll('[aria-expanded=\"true\"]');\n            openElementCollection = parentNode.getElementsByClassName('submenu-list-open');\n\n            if ((parentNode.id === this.menuId || parentNode.localName === 'ul') &&\n                expandedElementCollection.length) {\n                expandedElementCollection[0].setAttribute('aria-expanded', 'false');\n                openElementCollection[0].classList.remove('submenu-list-open');\n            }\n        }\n        console.log({ target, expandedElementCollection, openElementCollection })\n        return;\n    }\n\n    clickHandler(evt) {\n        let { target } = evt;\n        let submenuList = null;\n\n        // people might click on the icon instead of the button.\n        // if so, set the target to the parent (button)\n        if (target.localName === 'span') {\n            target = target.parentElement;\n        }\n        \n        // if there's an open submenu with sub-submenus...\n        if (document.querySelectorAll('.submenu-list-open').length > 0 && !document.querySelectorAll('.submenu-list-open')[0].contains(target)) {\n            \n            const submenuNodeList = document.querySelectorAll('.submenu-list-open');\n            console.log(submenuNodeList, 'if')\n\n            if (target.nextSibling && target.nextSibling.localName === 'ul') {\n                // if you click from one menu item to another, open the next menu and close the previous one immediately.\n                const nextMenu = target.nextSibling;\n                nextMenu.classList.add('submenu-list-open');    \n            }\n            \n            submenuNodeList.forEach((el) => {\n                // toggle all the menus in the NodeList\n                this.toggleSubmenuMenuClass(el);\n            })\n            \n            \n            this.toggleButtonAria(target);\n    \n        } else {\n            // we're near a submenu by clicking on a button but the menu isn't initially open.\n            if (target.nextSibling !== null) {\n                submenuList = target.nextSibling;\n                console.log(submenuList, 'else...')\n                // check if there's a nested submenu\n                submenuList.getElementsByTagName('ul').length ?\n                    this.hasNestedSubmenu = true :\n                    this.hasNestedSubmenu = false;\n        \n                this.toggleSubmenuMenuClass(submenuList);\n                this.toggleButtonAria(target);\n            } \n        }\n    }\n\n    escapeHandler(evt) {\n        const { keyCode } = evt;\n        console.log(keyCode, 'escape')\n        const submenuNodeList = document.querySelectorAll('.submenu-list-open');\n        // const buttonNodeList = document.querySelectorAll('[aria-expanded=\"true\"]')\n        submenuNodeList.forEach((el) => {\n            // toggle all the menus in the NodeList\n            this.toggleSubmenuMenuClass(el);\n        })\n        // buttonNodeList.forEach((el) => {\n        //     this.toggleButtonAria(el);\n        // })\n    }\n\n    focusInHandler(evt) {\n        console.log(evt.target, 'focus!')\n    }\n\n    toggleButtonAria(target) {\n\n\n        console.log(target.nextElementSibling);\n\n        const submenuChildren = target.nextElementSibling.childNodes;\n        submenuChildren.forEach((child) => {\n            if (child.getAttribute('data-has-children')) {\n                const target = child.querySelector('button');\n                this.toggleButtonAria(target);\n                console.log(target);\n                console.log('sub-submenu found')\n            } else {\n                console.log('nothing here....')\n            }\n        })\n\n        \n\n\n\n        console.log('expanded?', target.getAttribute('aria-expanded'), target);\n        if (target.getAttribute('aria-expanded') === 'false') {\n            target.setAttribute('aria-expanded', 'true');\n        } else {\n            target.setAttribute('aria-expanded', 'false');\n        }\n    }\n\n    toggleSubmenuMenuClass(el) {\n        if (el !== null) {\n            el.classList.toggle('submenu-list-open');\n            console.log(el)\n        } else {\n            const elNode = document.querySelectorAll('.submenu-list-open');\n            elNode.forEach(el => {\n                el.classList.toggle('submenu-list-open');\n            })\n        }\n    }\n\n    eventDispatcher(evt) {\n        // dispatch event listeners to the correct functions.\n\n        // mousedown focusin click\n        // keydown focusin keydown click\n\n        switch (evt.type) {\n            case 'keydown':\n                if (evt.keyCode === 9) {\n                    // if the keydown is caused by the tab key, it should be a focusIn\n                    this.focusInHandler(evt);\n                } else if (evt.keyCode === 13) {\n                    // if the keydown is caused by the return key, it should be a click\n                    // evt.preventDefault();\n                    this.clickHandler(evt);\n                } else if (evt.keyCode === 27) {\n                    // if the keydown is caused by the escape key, close the menus\n                    this.escapeHandler(evt);\n                } else {\n                    // throw away all other events.\n                    return;\n                }\n                break;\n            \n            case 'mousedown':\n                // if the event was caused by the mouse, don't let the target gain focus.\n                evt.preventDefault();\n                this.clickHandler(evt);\n                break;\n            \n            default:\n                return;\n        }\n    }\n    setEventListeners() {\n        // if this script is running, remove the 'no-js' class from the elements.\n        const listElements = Array.prototype.slice.call(this.menu.getElementsByClassName('no-js'));\n        listElements.forEach(element => {\n            element.classList.remove('no-js');\n        });\n        // define a list of possible event listeners\n        let listeners = ['click', 'focusin', 'keydown', 'mouseover'];\n\n        if (this.click) {\n            listeners.push('mousedown', 'mouseup');\n            \n            const subMenuList = this.menu.querySelectorAll('.submenu-list');\n            \n            subMenuList.forEach(menu => menu.classList.add('click-menu'));\n\n        } else {\n            listeners.push('mouseout');\n        }\n        // attach them to the document.\n        for (let i = 0; i < listeners.length; i++) {\n            document.addEventListener(listeners[i], (evt) => {\n                // dispatch the events to the class methods.\n                this.eventDispatcher(evt);\n            });\n        }\n    }\n    setSubmenuIcon() {\n        // possible font-family for the icons\n        let fontFamily = this.fontFamily;\n\n        if (!this.fontFamilies.includes(fontFamily)) {\n            fontFamily = '';\n        }\n\n        // the list of all the submenu icons\n        const icons = this.menu.querySelectorAll('.submenu-icon');\n        // the css to inject into the page\n        const hoverCss = `\n            nav ul li span::before {\n                content: '${this.chevronDown}';\n                font-family: '${fontFamily}';\n                font-weight: bold;\n            }\n            nav ul.click-menu li > button[aria-expanded=\"true\"] span::before,\n            nav ul:not(.click-menu) li:hover > button span::before,\n            nav ul li:focus > button span::before { \n                content: '${this.chevronUp}';\n                font-family: '${fontFamily}'; \n                font-weight: bold;\n            }`;\n\n        // create a style tag\n        const style = document.createElement('style');\n\n        // add the styles to the tag (or a stylesheet if it exists)\n        if (style.styleSheet) {\n            style.styleSheet.cssText = hoverCss;\n        } else {\n            style.appendChild(document.createTextNode(hoverCss));\n        }\n\n        // add the tag to the <head>\n        document.getElementsByTagName('head')[0].appendChild(style);\n\n        // set the data-before attribute to the values passed in the constructor.\n        icons.forEach((icon) => icon.setAttribute('data-before', this.chevronDown));\n\n        return;\n    }\n    init() {\n        this.menu = document.getElementById(this.menuId);\n        this.setEventListeners();\n        this.setSubmenuIcon();\n    }\n}\n\n"]}