{"version":3,"sources":["Navigation.js"],"names":["Navigation","_ref","arguments","length","undefined","_ref$menuId","menuId","_ref$click","click","_classCallCheck","this","hasNestedSubmenu","currentItem","evt","type","target","customEvt","createCustomEvt","getAttribute","setAttribute","submenuList","menu","contains","preventDefault","clearAll","localName","parentElement","document","querySelectorAll","Array","from","nextSibling","add","el","_this","toggleSubmenuMenuClass","nextElementSibling","submenuArray","getElementsByTagName","nextMenu","dispatchEvent","_this2","parentNode","offsetParent","expandedButtonArray","openMenuArray","forEach","toggleButtonAria","previousElementSibling","id","classList","toggle","button","prevButton","isSameNode","clearMenus","clearButtons","expandedEl","querySelector","item","remove","detail","parent","CustomEvent","bubbles","getCurrentItem","focusInHandler","itemNode","clickHandler","_this3","element","listeners","push","i","addEventListener","eventDispatcher","setCurrentItem","getElementById","setEventListeners"],"mappings":"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","file":"Navigation.js","sourcesContent":["class Navigation {\n    constructor({\n        menuId = 'am-main-menu',\n        click = false\n    } = {}) {\n        this.hasNestedSubmenu = false;\n        this.menu = null;\n        this.menuId = menuId;\n        this.click = click;\n        this.currentItem = null;\n    }\n\n    hoverHandler(evt) {\n        const { type, target } = evt;\n        const customEvt = this.createCustomEvt();\n        if (type === 'mouseout' && target.getAttribute('aria-haspopup') === \"true\") {\n            target.setAttribute('aria-expanded', 'false');\n        } else if (type === 'mouseover' && target.getAttribute('aria-haspopup') === \"false\") {\n            target.setAttribute('aria-expanded', 'true');\n        }\n        target.dispatchEvent(customEvt)\n    }\n    /**\n     *\n     * Handle incoming clicks\n     *\n     * @param {object} evt object\n     * @returns void\n     * @memberof Navigation\n     */\n    clickHandler(evt) {\n        let target = evt.target;\n        let submenuList = null;\n\n        // if the click is inside the menu on a button, prevent the target from gaining focus and continue.\n        // otherwise do nothing.\n\n        if (!this.menu.contains(target) && (evt.type === 'mousedown' || evt.type === 'keydown')) {\n            this.clearAll();\n        } else if (this.menu.contains(target) && evt.type !== 'keydown') {\n            evt.preventDefault();\n        } \n\n        // people might click on the icon instead of the button.\n        // if so, set the target to the parent (button)\n        if (target.localName === 'span') {\n            target = target.parentElement;\n        }\n        \n        // if there's an open submenu with sub-submenus...\n        if (document.querySelectorAll('.am-submenu-list-open').length > 0 && !document.querySelectorAll('.am-submenu-list-open')[0].contains(target)) {\n\n            const submenuArray = Array.from(document.querySelectorAll('.am-submenu-list-open'));\n\n            if (target.nextSibling && target.nextSibling.localName === 'ul') {\n                // if you click from one menu item to another, open the next menu and close the previous one immediately.\n                const nextMenu = target.nextSibling;\n                nextMenu.classList.add('am-submenu-list-open');    \n            }\n            \n            submenuArray.forEach((el) => {\n                // toggle all the menus in the NodeList\n                this.toggleSubmenuMenuClass(el);\n            })\n            \n            this.toggleButtonAria(target);\n    \n        } else {\n            const nextSibling = target.nextElementSibling;\n            \n            // we're near a submenu by clicking on a button but the menu isn't initially open.\n            if (nextSibling !== null && nextSibling.localName === 'ul') {\n                submenuList = nextSibling;\n\n                // check if there's a nested submenu\n                submenuList.getElementsByTagName('ul').length ?\n                    this.hasNestedSubmenu = true :\n                    this.hasNestedSubmenu = false;\n        \n                this.toggleSubmenuMenuClass(submenuList);\n                this.toggleButtonAria(target);\n            }\n        }\n        const customEvt = this.createCustomEvt();\n        target.dispatchEvent(customEvt)\n    }\n\n    /**\n     * \n     * Handle automatically closing the sub-menus.\n     * When a person opens a sub-menu and then leaves by tabbing, close the sub-menu.\n     * \n     * @param {object} evt\n     * @return - void\n     * @memberof Navigation\n     */\n    focusInHandler(evt) {\n        \n        const { target, target: { offsetParent: { parentNode } } } = evt;\n\n        let expandedButtonArray = Array.from(this.menu.querySelectorAll('[aria-expanded=\"true\"]'));\n        let openMenuArray = Array.from(this.menu.querySelectorAll('.am-submenu-list-open'));\n\n        if (!this.menu.contains(target) && expandedButtonArray.length) {\n            // if we leave the menu, clear everything\n            this.clearAll();\n        } else if (this.menu.contains(target) && openMenuArray.length > 1) {\n            // if focus is still in the menu and there's a sub-sub-menu, \n            // handle openning and closing when focus leaves.\n            openMenuArray.forEach(menu => {\n                if (!menu.contains(target)) {\n                    this.toggleSubmenuMenuClass(menu);\n                    this.toggleButtonAria(menu.previousElementSibling);\n                }\n            })\n        } else {\n            // still in the menu, but moving from one <li> to another\n            // toggle just the button and submenu for the elements that received focusout.\n            expandedButtonArray = Array.from(parentNode.querySelectorAll('[aria-expanded=\"true\"]'));\n            openMenuArray = Array.from(parentNode.querySelectorAll('.am-submenu-list-open'));\n            \n            // check to make sure that the user hasn't moved to a different menu.\n            if (parentNode.id === this.menuId) {\n                this.toggleButtonAria(expandedButtonArray[0]);\n                this.toggleSubmenuMenuClass(openMenuArray[0]);\n            }\n        }\n        return;\n    }\n\n    /**\n     * \n     * Toggle the class of the submenu element or reset the classes for all menus\n     *\n     * @param {object} el - a submenu (<ul>) element.\n     * @memberof Navigation\n     */\n    toggleSubmenuMenuClass(el) {\n        if (el !== null && el !== undefined) {\n            el.classList.toggle('am-submenu-list-open');\n        } else {\n            this.clearMenus();\n        }\n    }\n\n    /**\n     * \n     * Toggle the state of each button to reflect the aria-expanded state\n     *\n     * @param {*} target - the DOM element returned by evt.target\n     * @returns void\n     * @memberof Navigation\n     */\n    toggleButtonAria(target) {\n        const buttonNode = Array.from(document.querySelectorAll('.am-submenu-toggle'));\n        \n        buttonNode.forEach(button => {\n            // for each button, determine if there is a button \"above\" it\n            const prevButton = button.parentElement.parentElement.previousElementSibling;\n\n            // case - clicking on a sub-submenu button which is currently NOT expanded.\n            if (button.isSameNode(target) && button.getAttribute('aria-expanded') === 'false' && prevButton) {\n                // toggle the states of the previous button and the button/target\n                prevButton.setAttribute('aria-expanded', 'true');\n                button.setAttribute('aria-expanded', 'true');\n            }\n            // case - clicking on a sub-submenu button which is currently expanded.\n            else if (button.isSameNode(target) && button.getAttribute('aria-expanded') === 'true' && prevButton) {\n                // keep the previous button expanded and toggle the button/target\n                prevButton.setAttribute('aria-expanded', 'true');\n                button.setAttribute('aria-expanded', 'false');\n            } \n            // case - clicking on a top level button which is currently NOT expanded\n            else if (button.isSameNode(target) && button.getAttribute('aria-expanded') === 'false') {\n                // expand the button\n                button.setAttribute('aria-expanded', 'true');\n            } \n            // case - all other buttons\n            else {\n                // reset the state to false\n                button.setAttribute('aria-expanded', 'false')\n            }\n        });\n        return;\n    }\n\n    /**\n     * Close all submenus\n     * \n     * @returns void\n     * @memberof Navigation\n     */\n    clearMenus() {\n        const menuArray = Array.from(this.menu.querySelectorAll('.am-submenu-list-open'));\n        menuArray.forEach(menu => {\n            menu.classList.toggle('am-submenu-list-open');\n        })\n        return;\n    }\n\n    /**\n     * Toggle all visual icons and set aria-expanded to false.\n     *\n     * @returns void\n     * @memberof Navigation\n     */\n    clearButtons() {\n        const buttonArray = Array.from(this.menu.querySelectorAll('.am-submenu-toggle'))\n        buttonArray.forEach((button) => {\n            button.setAttribute('aria-expanded', 'false');\n        })\n        return;\n    }\n\n    /**\n     * \n     * Completely reset the state of the menu\n     * \n     * @returns void\n     * @memberof Navigation\n     */\n    clearAll() {\n        this.clearMenus();\n        this.clearButtons();\n        return;\n    }\n\n    /**\n     * \n     * Get the button element which is expanded\n     * \n     * @return DOM element\n     */\n    getCurrentItem() {\n        const expandedEl = this.menu.querySelector('[aria-expanded=\"true\"]')\n        if (expandedEl) {\n            return expandedEl.parentElement;\n        }        \n    }\n\n    /**\n     * \n     * Add a class to the current top level list item\n     * \n     * @param obj the event object\n     * @return void  \n     */\n    setCurrentItem(evt) {\n        const itemNode = Array.from(this.menu.querySelectorAll('li'));\n        itemNode.forEach(item => {\n            item.classList.remove('am-current-item');\n        })\n\n        \n        if (evt.detail.parent) {\n            this.currentItem = evt.detail.parent;\n            this.currentItem.classList.add('am-current-item');\n        }\n    }\n\n\n    /**\n     * \n     * Create a custom event to hook into on clicks and hovers.\n     * \n     * @return obj \n     */\n    createCustomEvt() {\n        return new CustomEvent('am-set-current-item', {\n            bubbles: true,\n            detail: {\n                parent: this.getCurrentItem()\n            }\n        })\n    }\n\n    /**\n     *\n     * dispatch events to the correct functions.\n     * types include: click, focusin, keydown, mousedown\n     *\n     * @param {object} evt\n     * @returns void\n     * @memberof Navigation\n     */\n    eventDispatcher(evt) {\n        \n        // mousedown focusin click\n        // keydown focusin keydown click\n        switch (evt.type) {\n            case 'focusin':\n                this.focusInHandler(evt);\n                break;\n            case 'keydown':\n                if (evt.keyCode === 13) {\n                    // if the keydown is caused by the return key, it should be a click\n                    this.clickHandler(evt);\n                } else if (evt.keyCode === 27) {\n                    // if the keydown is caused by the escape key, close the menus\n                    this.clearAll();\n                } else {\n                    // throw away all other events.\n                    return;\n                }\n                break;\n            \n            case 'mousedown':\n                this.clickHandler(evt);\n                break;\n            \n            default:\n                return;\n        }\n    }\n\n    /**\n     *\n     * Remove the no-js class and attach event listeners\n     * \n     * @memberof Navigation\n     */\n    setEventListeners() {\n        // if this script is running, remove the 'no-js' class from the elements.\n        const listElements = Array.from(this.menu.querySelectorAll('.no-js'));\n        listElements.forEach(element => {\n            element.classList.remove('no-js');\n        });\n        // define a list of possible event listeners\n        let listeners = ['focusin', 'keydown', 'mouseover'];\n\n        if (this.click) {\n            listeners.push('mousedown');\n            \n            const subMenuList = Array.from(this.menu.querySelectorAll('.am-submenu-list'));\n            \n            subMenuList.forEach(menu => menu.classList.add('am-click-menu'));\n\n        } else {\n            listeners.push('mouseout');\n        }\n        // attach them to the document.\n        for (let i = 0; i < listeners.length; i++) {\n            document.addEventListener(listeners[i], (evt) => {\n                // dispatch the events to the class methods.\n                this.eventDispatcher(evt);\n            });\n        }\n        this.menu.addEventListener('am-set-current-item', (evt) => {\n            this.setCurrentItem(evt);\n        })\n    }\n\n    /**\n     * \n     * Initialize the menu by\n     * - assigning the menu\n     * - attaching event listeners\n     *\n     * @memberof Navigation\n     */\n    init() {\n        this.menu = document.getElementById(this.menuId);\n        this.setEventListeners();\n    }\n}\n\n"]}